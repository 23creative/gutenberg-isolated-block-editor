{"version":3,"sources":["../../../src/store/collab/controls.js"],"names":["ActionCreators","createRegistryControl","debugUndo","require","getRichTextHint","registry","clientId","attributeKey","select","getSelectionStart","undefined","applyChangesToYDoc","action","doc","getYDoc","isTriggeredByYDoc","applyLocalChangesToYDoc","blocks","isInitialContent","richTextHint","UPDATE_BLOCKS_WITH_UNDO","UPDATE_BLOCKS_WITHOUT_UNDO","undo","type","undoManager","getUndoManager","redo"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,YAA/B;AAEA;AACA;AACA;;AACA,SAASC,qBAAT,QAAsC,iBAAtC;;AAEA,MAAMC,SAAS,GAAGC,OAAO,CAAE,OAAF,CAAP,CAAoB,wBAApB,CAAlB,C,CAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAKC,QAAF,IAAgB;AACvC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA6BF,QAAQ,CAACG,MAAT,CAAiB,mBAAjB,EAAuCC,iBAAvC,EAAnC,CADuC,CAGvC;;AACA,SAAO,OAAOF,YAAP,KAAwB,QAAxB,GAAmC;AAAED,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAnC,GAAgEG,SAAvE;AACA,CALD;;AAOA,MAAMC,kBAAkB,GAAGV,qBAAqB,CAAII,QAAF,IAAkBO,MAAF,IAAc;AAC/E,QAAMC,GAAG,GAAGR,QAAQ,CAACG,MAAT,CAAiB,iBAAjB,EAAqCM,OAArC,EAAZ,CAD+E,CAG/E;AACA;;AACA,MAAKD,GAAG,IAAI,CAAED,MAAM,CAACG,iBAArB,EAAyC;AACxCF,IAAAA,GAAG,CAACG,uBAAJ,CACC;AAAEC,MAAAA,MAAM,EAAEL,MAAM,CAACK;AAAjB,KADD,EAEC;AACCC,MAAAA,gBAAgB,EAAEN,MAAM,CAACM,gBAD1B;AAECC,MAAAA,YAAY,EAAEf,eAAe,CAAEC,QAAF;AAF9B,KAFD;AAOA;;AAED,SAAOO,MAAP;AACA,CAhB+C,CAAhD;AAkBA,eAAe;AACdQ,EAAAA,uBAAuB,EAAET,kBADX;AAEdU,EAAAA,0BAA0B,EAAEV,kBAFd;AAId,GAAEX,cAAc,CAACsB,IAAf,GAAsBC,IAAxB,GAAgCtB,qBAAqB,CAAII,QAAF,IAAkBO,MAAF,IAAc;AACpF,UAAMY,WAAW,GAAGnB,QAAQ,CAACG,MAAT,CAAiB,iBAAjB,EAAqCiB,cAArC,EAApB;;AAEA,QAAK,CAAED,WAAP,EAAqB;AACpB,aAAOZ,MAAP;AACA;;AAEDV,IAAAA,SAAS,CAAE,MAAF,CAAT;AACAsB,IAAAA,WAAW,CAACF,IAAZ;AACA,WAToF,CAS5E;AACR,GAVoD,CAJvC;AAgBd,GAAEtB,cAAc,CAAC0B,IAAf,GAAsBH,IAAxB,GAAgCtB,qBAAqB,CAAII,QAAF,IAAkBO,MAAF,IAAc;AACpF,UAAMY,WAAW,GAAGnB,QAAQ,CAACG,MAAT,CAAiB,iBAAjB,EAAqCiB,cAArC,EAApB;;AAEA,QAAK,CAAED,WAAP,EAAqB;AACpB,aAAOZ,MAAP;AACA;;AAEDV,IAAAA,SAAS,CAAE,MAAF,CAAT;AACAG,IAAAA,QAAQ,CAACG,MAAT,CAAiB,iBAAjB,EAAqCiB,cAArC,GAAsDC,IAAtD;AACA,WAToF,CAS5E;AACR,GAVoD;AAhBvC,CAAf","sourcesContent":["/**\n * External dependencies\n */\nimport { ActionCreators } from 'redux-undo';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistryControl } from '@wordpress/data';\n\nconst debugUndo = require( 'debug' )( 'iso-editor:collab:undo' );\n\n// TODO: Unsolved problem\n/**\n * Return the clientId and block attribute key if the current selection can be\n * associated with a RichText attribute.\n *\n * Caution: This won't return false positives, but it will return false negatives.\n * Currently the only way of telling whether a given block attribute is associated with a `<RichText>`\n * in the editor is for it to be passed an `identifier` prop with the block attribute key,\n * e.g. `<RichText identifier=\"myAttributeKey\" />`. If the block developer has neglected to do this,\n * the selection.attributeKey will fall back to a `number`, and we can't tell which attribute it's\n * actually associated with. This happens a lot because the `identifier` prop is undocumented.\n *\n * @returns {import('../../components/collaborative-editing').RichTextHint|undefined}\n */\nconst getRichTextHint = ( registry ) => {\n\tconst { clientId, attributeKey } = registry.select( 'core/block-editor' ).getSelectionStart();\n\n\t// If the selection has an attribute key that is a string, we can deduce that the attribute is a RichText\n\treturn typeof attributeKey === 'string' ? { clientId, attributeKey } : undefined;\n};\n\nconst applyChangesToYDoc = createRegistryControl( ( registry ) => ( action ) => {\n\tconst doc = registry.select( 'isolated/editor' ).getYDoc();\n\n\t// If the change is triggered locally from the editor (i.e. is neither a remote change nor an undo/redo),\n\t// apply those changes to the Yjs doc.\n\tif ( doc && ! action.isTriggeredByYDoc ) {\n\t\tdoc.applyLocalChangesToYDoc(\n\t\t\t{ blocks: action.blocks },\n\t\t\t{\n\t\t\t\tisInitialContent: action.isInitialContent,\n\t\t\t\trichTextHint: getRichTextHint( registry ),\n\t\t\t}\n\t\t);\n\t}\n\n\treturn action;\n} );\n\nexport default {\n\tUPDATE_BLOCKS_WITH_UNDO: applyChangesToYDoc,\n\tUPDATE_BLOCKS_WITHOUT_UNDO: applyChangesToYDoc,\n\n\t[ ActionCreators.undo().type ]: createRegistryControl( ( registry ) => ( action ) => {\n\t\tconst undoManager = registry.select( 'isolated/editor' ).getUndoManager();\n\n\t\tif ( ! undoManager ) {\n\t\t\treturn action;\n\t\t}\n\n\t\tdebugUndo( 'undo' );\n\t\tundoManager.undo();\n\t\treturn; // prevent default action\n\t} ),\n\n\t[ ActionCreators.redo().type ]: createRegistryControl( ( registry ) => ( action ) => {\n\t\tconst undoManager = registry.select( 'isolated/editor' ).getUndoManager();\n\n\t\tif ( ! undoManager ) {\n\t\t\treturn action;\n\t\t}\n\n\t\tdebugUndo( 'redo' );\n\t\tregistry.select( 'isolated/editor' ).getUndoManager().redo();\n\t\treturn; // prevent default action\n\t} ),\n};\n"],"file":"controls.js"}