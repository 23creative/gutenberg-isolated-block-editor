{"version":3,"sources":["../../../src/store/editor/selectors.js"],"names":["getEditorMode","state","editor","editorMode","getEditorSettings","settings","isEditorReady","isReady","getCurrentPatternName","currentPattern","getCurrentPattern","patterns","index","length","getIgnoredContent","ignoredContent","getNamedPattern","patternName","pattern","find","item","name","replace","isInserterOpened","isInspecting","isEditing","getPatterns"],"mappings":"AAAA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAwBC,KAAxB,EAAgC;AACtC,SAAOA,KAAK,CAACC,MAAN,CAAaC,UAApB;AACA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA4BH,KAA5B,EAAoC;AAC1C,SAAOA,KAAK,CAACC,MAAN,CAAaG,QAApB;AACA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAwBL,KAAxB,EAAgC;AACtC,SAAOA,KAAK,CAACC,MAAN,CAAaK,OAApB;AACA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAAgCP,KAAhC,EAAwC;AAC9C,SAAOA,KAAK,CAACC,MAAN,CAAaO,cAApB;AACA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA4BT,KAA5B,EAAoC;AAC1C,QAAM;AAAEQ,IAAAA,cAAF;AAAkBE,IAAAA;AAAlB,MAA+BV,KAAK,CAACC,MAA3C;;AAEA,MAAKO,cAAc,IAAIE,QAAvB,EAAkC;AACjC,SAAM,IAAIC,KAAK,GAAG,CAAlB,EAAqBA,KAAK,GAAGD,QAAQ,CAACE,MAAtC,EAA8CD,KAAK,EAAnD,EAAwD;AACvD,UAAKD,QAAQ,CAAEC,KAAF,CAAR,CAAmB,MAAnB,MAAgCH,cAArC,EAAsD;AACrD,eAAOE,QAAQ,CAAEC,KAAF,CAAf;AACA;AACD;AACD;;AAED,SAAO,IAAP;AACA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,iBAAT,CAA4Bb,KAA5B,EAAoC;AAC1C,SAAOA,KAAK,CAACC,MAAN,CAAaa,cAApB;AACA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAA0Bf,KAA1B,EAAiCgB,WAAjC,EAA+C;AACrD,QAAM;AAAEN,IAAAA,QAAQ,GAAG;AAAb,MAAoBV,KAAK,CAACC,MAAhC;AACA,MAAIgB,OAAO,GAAGP,QAAQ,CAACQ,IAAT,CAAiBC,IAAF,IAAYA,IAAI,CAACC,IAAL,KAAcJ,WAAzC,CAAd,CAFqD,CAIrD;;AACA,MAAKC,OAAL,EAAe;AACd,WAAOA,OAAP;AACA,GAPoD,CASrD;;;AACAA,EAAAA,OAAO,GAAGP,QAAQ,CAACQ,IAAT,CAAiBC,IAAF,IAAYA,IAAI,CAACC,IAAL,CAAUC,OAAV,CAAmB,KAAnB,EAA0B,EAA1B,MAAmCL,WAA9D,CAAV;;AACA,MAAKC,OAAL,EAAe;AACd,WAAOA,OAAP;AACA;;AAED,SAAO,IAAP;AACA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,gBAAT,CAA2BtB,KAA3B,EAAmC;AACzC,SAAOA,KAAK,CAACC,MAAN,CAAaqB,gBAApB;AACA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAuBvB,KAAvB,EAA+B;AACrC,SAAOA,KAAK,CAACC,MAAN,CAAasB,YAApB;AACA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAoBxB,KAApB,EAA4B;AAClC,SAAOA,KAAK,CAACC,MAAN,CAAauB,SAApB;AACA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAsBzB,KAAtB,EAA8B;AACpC,SAAOA,KAAK,CAACC,MAAN,CAAaS,QAApB;AACA","sourcesContent":["/** @typedef {import('../../index').IsoSettings} IsoSettings */\n/** @typedef {import('./reducer').EditorMode} EditorMode */\n/** @typedef {import('./reducer').Pattern} Pattern */\n/** @typedef {import('./reducer').EditorState} EditorState */\n\n/**\n * Get current editor mode\n * @param {{editor: EditorState}} state - Current state\n * @returns {EditorMode}\n */\nexport function getEditorMode( state ) {\n\treturn state.editor.editorMode;\n}\n\n/**\n * Get current editor settings\n * @param {{editor: EditorState}} state - Current state\n * @returns {IsoSettings}\n */\nexport function getEditorSettings( state ) {\n\treturn state.editor.settings;\n}\n\n/**\n * Is the editor ready for use?\n * @param {{editor: EditorState}} state - Current state\n * @returns {boolean}\n */\nexport function isEditorReady( state ) {\n\treturn state.editor.isReady;\n}\n\n/**\n * Get current pattern name\n * @param {{editor: EditorState}} state - Current state\n * @returns {string}\n */\nexport function getCurrentPatternName( state ) {\n\treturn state.editor.currentPattern;\n}\n\n/**\n * Get current pattern\n * @param {{editor: EditorState}} state - Current state\n * @returns {Pattern}\n */\nexport function getCurrentPattern( state ) {\n\tconst { currentPattern, patterns } = state.editor;\n\n\tif ( currentPattern && patterns ) {\n\t\tfor ( let index = 0; index < patterns.length; index++ ) {\n\t\t\tif ( patterns[ index ][ 'name' ] === currentPattern ) {\n\t\t\t\treturn patterns[ index ];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Get all ignored content\n * @param {{editor: EditorState}} state - Current state\n * @returns {string[]}\n */\nexport function getIgnoredContent( state ) {\n\treturn state.editor.ignoredContent;\n}\n\n/**\n * Get the pattern for a given name\n * @param {{editor: EditorState}} state - Current state\n * @returns {Pattern}\n */\nexport function getNamedPattern( state, patternName ) {\n\tconst { patterns = [] } = state.editor;\n\tlet pattern = patterns.find( ( item ) => item.name === patternName );\n\n\t// Find the full name\n\tif ( pattern ) {\n\t\treturn pattern;\n\t}\n\n\t// Find the shortened name\n\tpattern = patterns.find( ( item ) => item.name.replace( 'p2/', '' ) === patternName );\n\tif ( pattern ) {\n\t\treturn pattern;\n\t}\n\n\treturn null;\n}\n\n/**\n * Is the block inserter open?\n * @param {{editor: EditorState}} state - Current state\n * @returns {boolean}\n */\nexport function isInserterOpened( state ) {\n\treturn state.editor.isInserterOpened;\n}\n\n/**\n * Is the block inspector open?\n * @param {{editor: EditorState}} state - Current state\n * @returns {boolean}\n */\nexport function isInspecting( state ) {\n\treturn state.editor.isInspecting;\n}\n\n/**\n * Are we editing this editor?\n * @param {{editor: EditorState}} state - Current state\n * @returns {boolean}\n */\nexport function isEditing( state ) {\n\treturn state.editor.isEditing;\n}\n\n/**\n * Get all patterns\n * @param {{editor: EditorState}} state - Current state\n * @returns {Pattern[]}\n */\nexport function getPatterns( state ) {\n\treturn state.editor.patterns;\n}\n"],"file":"selectors.js"}