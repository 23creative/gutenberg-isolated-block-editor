{"version":3,"sources":["../../../src/components/editor-setup/editor-settings.js"],"names":["getAllowedBlockTypes","blockSettings","allBlockTypes","allowBlocks","length","map","block","name","getDisallowedBlocks","disallowBlocks","getEditorSettings","editorSettings","isoSettings","hasFixedToolbar","blocks","allowedBlockTypes","filter","blockName","indexOf","mediaUpload","allowedMimeTypes"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAT,CAA+BC,aAA/B,EAA8CC,aAA9C,EAA8D;AAC7D,MAAKD,aAAa,IAAIA,aAAa,CAACE,WAA/B,IAA8CF,aAAa,CAACE,WAAd,CAA0BC,MAA1B,GAAmC,CAAtF,EAA0F;AACzF,WAAOH,aAAa,CAACE,WAArB;AACA,GAH4D,CAK7D;;;AACA,SAAOD,aAAa,CAACG,GAAd,CAAqBC,KAAF,IAAaA,KAAK,CAACC,IAAtC,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,mBAAT,CAA8BP,aAA9B,EAA8C;AAC7C,MAAKA,aAAa,IAAIA,aAAa,CAACQ,cAApC,EAAqD;AACpD,WAAOR,aAAa,CAACQ,cAArB;AACA,GAH4C,CAK7C;;;AACA,SAAO,EAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,iBAAT,CAA4BC,cAA5B,EAA4CC,WAA5C,EAAyDV,aAAzD,EAAwEW,eAAxE,EAA0F;AACxG,QAAMJ,cAAc,GAAGD,mBAAmB,CAAEI,WAAW,CAACE,MAAd,CAA1C;AAEA,SAAO,EACN,GAAGH,cADG;AAENE,IAAAA,eAFM;AAGNE,IAAAA,iBAAiB,EAAEf,oBAAoB,CAAEY,WAAW,CAACE,MAAd,EAAsBZ,aAAtB,CAApB,CAA0Dc,MAA1D,CAChBC,SAAF,IAAiBR,cAAc,CAACS,OAAf,CAAwBD,SAAxB,MAAwC,CAAC,CADxC,CAHb;AAON;AACAE,IAAAA,WAAW,EAAER,cAAc,CAACS,gBAAf,CAAgChB,MAAhC,KAA2C,CAA3C,GAA+C,IAA/C,GAAsDO,cAAc,CAACQ;AAR5E,GAAP;AAUA","sourcesContent":["/** @typedef {import('../../index').EditorSettings} EditorSettings */\n/** @typedef {import('../../index').IsoSettings} IsoSettings */\n\n/**\n * Get all the allowed block types, either from the settings, or all available blocks\n *\n * @param {{allowBlocks: string[]}} blockSettings - settings for available blocks\n * @param {object[]} allBlockTypes - All available blocks\n * @returns {string[]}\n */\nfunction getAllowedBlockTypes( blockSettings, allBlockTypes ) {\n\tif ( blockSettings && blockSettings.allowBlocks && blockSettings.allowBlocks.length > 0 ) {\n\t\treturn blockSettings.allowBlocks;\n\t}\n\n\t// No allow blocks - return all blocks\n\treturn allBlockTypes.map( ( block ) => block.name );\n}\n\n/**\n * Get all the disallowed block types, either from the settings, or all available blocks\n *\n * @param {{disallowBlocks: string[]}} blockSettings - settings for disallowed blocks\n * @returns {string[]}\n */\nfunction getDisallowedBlocks( blockSettings ) {\n\tif ( blockSettings && blockSettings.disallowBlocks ) {\n\t\treturn blockSettings.disallowBlocks;\n\t}\n\n\t// No blocks disallowed\n\treturn [];\n}\n\n/**\n * Get editor settings\n *\n * @param {EditorSettings} editorSettings - Editor settings\n * @param {IsoSettings} isoSettings\n * @param {object[]} allBlockTypes - All available blocks\n * @param {boolean} hasFixedToolbar - Do we need a fixed toolbar?\n * @returns {EditorSettings}\n */\nexport default function getEditorSettings( editorSettings, isoSettings, allBlockTypes, hasFixedToolbar ) {\n\tconst disallowBlocks = getDisallowedBlocks( isoSettings.blocks );\n\n\treturn {\n\t\t...editorSettings,\n\t\thasFixedToolbar,\n\t\tallowedBlockTypes: getAllowedBlockTypes( isoSettings.blocks, allBlockTypes ).filter(\n\t\t\t( blockName ) => disallowBlocks.indexOf( blockName ) === -1\n\t\t),\n\n\t\t// Enable or disable media uploads. We do this here as a logged out user doesn't have a user object, and so the standard Gutenberg `canUser` won't work\n\t\tmediaUpload: editorSettings.allowedMimeTypes.length === 0 ? null : editorSettings.mediaUpload,\n\t};\n}\n"],"file":"editor-settings.js"}