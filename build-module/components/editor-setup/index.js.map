{"version":3,"sources":["../../../src/components/editor-setup/index.js"],"names":["__","useEffect","withDispatch","withSelect","useMemo","compose","getEditorSettings","EditorSetup","props","currentSettings","updateSettings","setupEditor","isEditing","topToolbar","setupCoreEditor","id","type","editor","reusableBlocks","select","settings","isFeatureActive","getBlockTypes","blockTypes","hasFixedToolbar","getEntityRecords","iso","__experimentalReusableBlocks","__experimentalFetchReusableBlocks","dispatch","updateEditorSettings","setupEditorState"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\n\nimport { __ } from '@wordpress/i18n';\nimport { useEffect } from '@wordpress/element';\nimport { withDispatch, withSelect } from '@wordpress/data';\nimport { useMemo } from '@wordpress/element';\nimport { compose } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\n\nimport getEditorSettings from './editor-settings';\n\n/** @typedef {import('../../index').BlockEditorSettings} BlockEditorSettings */\n\n/**\n * Settings callback\n * @callback OnSettings\n * @param {BlockEditorSettings} settings\n */\n\n/**\n * Sets up Gutenberg and the Isolated Block Editor\n *\n * An initial setup is performed, and is then reset each time the editor is focussed. This ensures we are applying the right\n * settings for this particular editor.\n *\n * @param {object} props - Component props\n * @param {BlockEditorSettings} props.currentSettings - Modified settings\n * @param {OnSettings} props.updateSettings - Update settings\n * @param {OnSettings} props.setupEditor - Set up the Gutenberg editor\n * @param {boolean} props.isEditing - Are we editing in this editor?\n * @param {boolean} props.topToolbar - Is the top toolbar enabled?\n */\nfunction EditorSetup( props ) {\n\tconst { currentSettings, updateSettings, setupEditor, isEditing, topToolbar, setupCoreEditor } = props;\n\n\t// This is the initial setup\n\tuseEffect( () => {\n\t\t// Setup the Isolated Editor & Gutenberg\n\t\tsetupEditor( currentSettings );\n\n\t\t// And Gutenberg\n\t\tupdateSettings( currentSettings );\n\n\t\t// Set up the post entities with some dummy data, ensuring that anything that uses post entities can work\n\t\tsetupCoreEditor( {\n\t\t\tid: 0,\n\t\t\ttype: 'post',\n\t\t}, [] );\n\t}, [] );\n\n\t// Run whenever the editor is focussed, or the topToolbar setting or reusable blocks change\n\tuseEffect( () => {\n\t\tif ( ! isEditing ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Setup Gutenberg for this editor, but only when focussed. This swaps allowed blocks and other capabilities\n\t\tupdateSettings( currentSettings );\n\t}, [ isEditing, topToolbar, currentSettings.editor.reusableBlocks ] );\n\n\treturn null;\n}\n\nexport default compose( [\n\twithSelect( ( select, { settings } ) => {\n\t\tconst { isEditing, isFeatureActive } = select( 'isolated/editor' );\n\t\tconst { getBlockTypes } = select( 'core/blocks' );\n\t\tconst blockTypes = getBlockTypes();\n\t\tconst hasFixedToolbar = isFeatureActive( 'fixedToolbar' );\n\t\tconst reusableBlocks = select( 'core' ).getEntityRecords( 'postType', 'wp_block' );\n\n\t\treturn {\n\t\t\tisEditing: isEditing(),\n\t\t\ttopToolbar: hasFixedToolbar,\n\t\t\tcurrentSettings: useMemo(\n\t\t\t\t() => ( {\n\t\t\t\t\t...settings,\n\n\t\t\t\t\teditor: {\n\t\t\t\t\t\t...getEditorSettings(\n\t\t\t\t\t\t\tsettings.editor,\n\t\t\t\t\t\t\tsettings.iso,\n\t\t\t\t\t\t\tblockTypes,\n\t\t\t\t\t\t\thasFixedToolbar || settings.editor?.hasFixedToolbar || false\n\t\t\t\t\t\t),\n\n\t\t\t\t\t\t// Reusable blocks\n\t\t\t\t\t\t__experimentalReusableBlocks: [],\n\t\t\t\t\t\t__experimentalFetchReusableBlocks: false,\n\t\t\t\t\t\t// ...( settings.editor?.__experimentalReusableBlocks === false\n\t\t\t\t\t\t// \t? {\n\t\t\t\t\t\t// \t\t\t__experimentalReusableBlocks: reusableBlocks,\n\t\t\t\t\t\t// \t\t\t__experimentalFetchReusableBlocks: false,\n\t\t\t\t\t\t// \t  }\n\t\t\t\t\t\t// \t: {\n\t\t\t\t\t\t// \t\t\t__experimentalReusableBlocks: reusableBlocks,\n\t\t\t\t\t\t// \t\t\t__experimentalFetchReusableBlocks: registry.dispatch( 'core/editor' )\n\t\t\t\t\t\t// \t\t\t\t.__experimentalFetchReusableBlocks,\n\t\t\t\t\t\t// \t  } ),\n\t\t\t\t\t},\n\t\t\t\t} ),\n\t\t\t\t[ settings, blockTypes, hasFixedToolbar, reusableBlocks ]\n\t\t\t),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\tconst { updateEditorSettings, setupEditorState: setupCoreEditor } = dispatch( 'core/editor' );\n\t\tconst { updateSettings } = dispatch( 'core/block-editor' );\n\t\tconst { setupEditor } = dispatch( 'isolated/editor' );\n\n\t\treturn {\n\t\t\tsetupEditor,\n\t\t\tsetupCoreEditor,\n\t\t\tupdateSettings: ( { editor } ) => {\n\t\t\t\tupdateSettings( editor );\n\t\t\t\tupdateEditorSettings( editor );\n\t\t\t},\n\t\t};\n\t} ),\n] )( EditorSetup );\n"],"file":"index.js"}