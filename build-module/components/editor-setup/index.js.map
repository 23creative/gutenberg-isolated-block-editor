{"version":3,"sources":["../../../src/components/editor-setup/index.js"],"names":["__","useEffect","withDispatch","withSelect","useMemo","compose","getEditorSettings","EditorSetup","props","currentSettings","updateSettings","setupEditor","isEditing","topToolbar","setupCoreEditor","id","type","editor","reusableBlocks","select","settings","isFeatureActive","getBlockTypes","blockTypes","hasFixedToolbar","getEntityRecords","iso","__experimentalReusableBlocks","__experimentalFetchReusableBlocks","dispatch","updateEditorSettings","setupEditorState"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\n\nimport { __ } from '@wordpress/i18n';\nimport { useEffect } from '@wordpress/element';\nimport { withDispatch, withSelect } from '@wordpress/data';\nimport { useMemo } from '@wordpress/element';\nimport { compose } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\n\nimport getEditorSettings from './editor-settings';\n\n/** @typedef {import('../../index').BlockEditorSettings} BlockEditorSettings */\n\n/**\n * Settings callback\n * @callback OnSettings\n * @param {BlockEditorSettings} settings\n */\n\n/**\n * Sets up Gutenberg and the Isolated Block Editor\n *\n * An initial setup is performed, and is then reset each time the editor is focussed. This ensures we are applying the right\n * settings for this particular editor.\n *\n * @param {object} props - Component props\n * @param {BlockEditorSettings} props.currentSettings - Modified settings\n * @param {OnSettings} props.updateSettings - Update settings\n * @param {OnSettings} props.setupEditor - Set up the Gutenberg editor\n * @param {boolean} props.isEditing - Are we editing in this editor?\n * @param {boolean} props.topToolbar - Is the top toolbar enabled?\n */\nfunction EditorSetup( props ) {\n\t// @ts-ignore\n\tconst { currentSettings, updateSettings, setupEditor, isEditing, topToolbar, setupCoreEditor } = props;\n\n\t// This is the initial setup\n\tuseEffect( () => {\n\t\t// Setup the Isolated Editor & Gutenberg\n\t\tsetupEditor( currentSettings );\n\n\t\t// And Gutenberg\n\t\tupdateSettings( currentSettings );\n\n\t\t// Set up the post entities with some dummy data, ensuring that anything that uses post entities can work\n\t\tsetupCoreEditor( {\n\t\t\tid: 0,\n\t\t\ttype: 'post',\n\t\t}, [] );\n\t}, [] );\n\n\t// Run whenever the editor is focussed, or the topToolbar setting or reusable blocks change\n\tuseEffect( () => {\n\t\tif ( ! isEditing ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Setup Gutenberg for this editor, but only when focussed. This swaps allowed blocks and other capabilities\n\t\tupdateSettings( currentSettings );\n\t}, [ isEditing, topToolbar, currentSettings?.editor?.reusableBlocks ] );\n\n\treturn null;\n}\n\nexport default compose( [\n\twithSelect( ( select, { settings } ) => {\n\t\tconst { isEditing, isFeatureActive } = select( 'isolated/editor' );\n\t\tconst { getBlockTypes } = select( 'core/blocks' );\n\t\tconst blockTypes = getBlockTypes();\n\t\tconst hasFixedToolbar = isFeatureActive( 'fixedToolbar' );\n\t\tconst reusableBlocks = select( 'core' ).getEntityRecords( 'postType', 'wp_block' );\n\n\t\treturn {\n\t\t\tisEditing: isEditing(),\n\t\t\ttopToolbar: hasFixedToolbar,\n\t\t\tcurrentSettings: useMemo(\n\t\t\t\t() => ( {\n\t\t\t\t\t...settings,\n\n\t\t\t\t\teditor: {\n\t\t\t\t\t\t...getEditorSettings(\n\t\t\t\t\t\t\tsettings.editor,\n\t\t\t\t\t\t\tsettings.iso,\n\t\t\t\t\t\t\tblockTypes,\n\t\t\t\t\t\t\thasFixedToolbar || settings.editor?.hasFixedToolbar || false\n\t\t\t\t\t\t),\n\n\t\t\t\t\t\t// Reusable blocks\n\t\t\t\t\t\t__experimentalReusableBlocks: [],\n\t\t\t\t\t\t__experimentalFetchReusableBlocks: false,\n\t\t\t\t\t\t// ...( settings.editor?.__experimentalReusableBlocks === false\n\t\t\t\t\t\t// \t? {\n\t\t\t\t\t\t// \t\t\t__experimentalReusableBlocks: reusableBlocks,\n\t\t\t\t\t\t// \t\t\t__experimentalFetchReusableBlocks: false,\n\t\t\t\t\t\t// \t  }\n\t\t\t\t\t\t// \t: {\n\t\t\t\t\t\t// \t\t\t__experimentalReusableBlocks: reusableBlocks,\n\t\t\t\t\t\t// \t\t\t__experimentalFetchReusableBlocks: registry.dispatch( 'core/editor' )\n\t\t\t\t\t\t// \t\t\t\t.__experimentalFetchReusableBlocks,\n\t\t\t\t\t\t// \t  } ),\n\t\t\t\t\t},\n\t\t\t\t} ),\n\t\t\t\t[ settings, blockTypes, hasFixedToolbar, reusableBlocks ]\n\t\t\t),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\tconst { updateEditorSettings, setupEditorState: setupCoreEditor } = dispatch( 'core/editor' );\n\t\tconst { updateSettings } = dispatch( 'core/block-editor' );\n\t\tconst { setupEditor } = dispatch( 'isolated/editor' );\n\n\t\treturn {\n\t\t\tsetupEditor,\n\t\t\tsetupCoreEditor,\n\t\t\tupdateSettings: ( { editor } ) => {\n\t\t\t\tupdateSettings( editor );\n\t\t\t\tupdateEditorSettings( editor );\n\t\t\t},\n\t\t};\n\t} ),\n] )( EditorSetup );\n"],"file":"index.js"}