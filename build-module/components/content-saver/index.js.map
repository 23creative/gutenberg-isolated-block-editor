{"version":3,"sources":["../../../src/components/content-saver/index.js"],"names":["useEffect","useRef","useSelect","useDispatch","serialize","ContentSaver","props","onSaveBlocks","onSaveContent","firstTime","setReady","blocks","ignoredContent","select","getBlocks","getIgnoredContent","saveBlocks","current","length"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,oBAAlC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,iBAAvC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAuBC,KAAvB,EAA+B;AAC9B,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAkCF,KAAxC;AACA,QAAMG,SAAS,GAAGR,MAAM,CAAE,IAAF,CAAxB;AACA,QAAM;AAAES,IAAAA;AAAF,MAAeP,WAAW,CAAE,iBAAF,CAAhC;AACA,QAAM;AAAEQ,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA6BV,SAAS,CACzCW,MAAF,KAAgB;AACfF,IAAAA,MAAM,EAAEE,MAAM,CAAE,iBAAF,CAAN,CAA4BC,SAA5B,EADO;AAEfF,IAAAA,cAAc,EAAEC,MAAM,CAAE,iBAAF,CAAN,CAA4BE,iBAA5B;AAFD,GAAhB,CAD2C,EAK3C,EAL2C,CAA5C;;AAQA,WAASC,UAAT,GAAsB;AACrB;AACAT,IAAAA,YAAY,IAAIA,YAAY,CAAEI,MAAF,EAAUC,cAAV,CAA5B;AACAJ,IAAAA,aAAa,IAAIA,aAAa,CAAEJ,SAAS,CAAEO,MAAF,CAAX,CAA9B;AACA;;AAEDX,EAAAA,SAAS,CAAE,MAAM;AAChB,QAAK,CAAEW,MAAP,EAAgB;AACfD,MAAAA,QAAQ,CAAE,IAAF,CAAR;AACA;AACA,KAJe,CAMhB;;;AACA,QAAKD,SAAS,CAACQ,OAAf,EAAyB;AACxBR,MAAAA,SAAS,CAACQ,OAAV,GAAoB,KAApB;AACAP,MAAAA,QAAQ,CAAE,IAAF,CAAR,CAFwB,CAIxB;;AACA,UAAKC,MAAM,IAAIA,MAAM,CAACO,MAAP,GAAgB,CAA/B,EAAmC;AAClCF,QAAAA,UAAU;AACV;AACD,KARD,MAQO;AACNA,MAAAA,UAAU;AACV;AACD,GAlBQ,EAkBN,CAAEL,MAAF,CAlBM,CAAT;AAoBA,SAAO,IAAP;AACA;;AAED,eAAeN,YAAf","sourcesContent":["/**\n * WordPress dependencies\n */\n\nimport { useEffect, useRef } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { serialize } from '@wordpress/blocks';\n\n/** @typedef {import('../../index').OnSaveBlocks} OnSaveBlocks */\n/** @typedef {import('../../index').OnSaveContent} OnSaveContent */\n\n/**\n * Content saver\n * @param {object} props - Component props\n * @param {OnSaveBlocks} [props.onSaveBlocks] - Save blocks callback\n * @param {OnSaveContent} [props.onSaveContent] - Save content callback\n */\nfunction ContentSaver( props ) {\n\tconst { onSaveBlocks, onSaveContent } = props;\n\tconst firstTime = useRef( true );\n\tconst { setReady } = useDispatch( 'isolated/editor' );\n\tconst { blocks, ignoredContent } = useSelect(\n\t\t( select ) => ( {\n\t\t\tblocks: select( 'isolated/editor' ).getBlocks(),\n\t\t\tignoredContent: select( 'isolated/editor' ).getIgnoredContent(),\n\t\t} ),\n\t\t[]\n\t);\n\n\tfunction saveBlocks() {\n\t\t// Save the content in the format wanted by the user\n\t\tonSaveBlocks && onSaveBlocks( blocks, ignoredContent );\n\t\tonSaveContent && onSaveContent( serialize( blocks ) );\n\t}\n\n\tuseEffect( () => {\n\t\tif ( ! blocks ) {\n\t\t\tsetReady( true );\n\t\t\treturn;\n\t\t}\n\n\t\t// Try and avoid an initial first save if no content\n\t\tif ( firstTime.current ) {\n\t\t\tfirstTime.current = false;\n\t\t\tsetReady( true );\n\n\t\t\t// The editor has initial content - save it\n\t\t\tif ( blocks && blocks.length > 1 ) {\n\t\t\t\tsaveBlocks();\n\t\t\t}\n\t\t} else {\n\t\t\tsaveBlocks();\n\t\t}\n\t}, [ blocks ] );\n\n\treturn null;\n}\n\nexport default ContentSaver;\n"],"file":"index.js"}