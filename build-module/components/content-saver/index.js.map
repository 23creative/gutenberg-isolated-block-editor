{"version":3,"sources":["../../../src/components/content-saver/index.js"],"names":["useEffect","useRef","useSelect","useDispatch","serialize","ContentSaver","props","onSaveBlocks","onSaveContent","firstTime","setReady","select","blocks","getBlocks","ignoredContent","getIgnoredContent","current"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,oBAAlC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,iBAAvC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAuBC,KAAvB,EAA+B;AAAA,MACtBC,YADsB,GACUD,KADV,CACtBC,YADsB;AAAA,MACRC,aADQ,GACUF,KADV,CACRE,aADQ;AAE9B,MAAMC,SAAS,GAAGR,MAAM,CAAE,IAAF,CAAxB;;AAF8B,qBAGTE,WAAW,CAAE,iBAAF,CAHF;AAAA,MAGtBO,QAHsB,gBAGtBA,QAHsB;;AAAA,mBAIKR,SAAS,CAC3C,UAAES,MAAF;AAAA,WAAgB;AACfC,MAAAA,MAAM,EAAED,MAAM,CAAE,iBAAF,CAAN,CAA4BE,SAA5B,EADO;AAEfC,MAAAA,cAAc,EAAEH,MAAM,CAAE,iBAAF,CAAN,CAA4BI,iBAA5B;AAFD,KAAhB;AAAA,GAD2C,EAK3C,EAL2C,CAJd;AAAA,MAItBH,MAJsB,cAItBA,MAJsB;AAAA,MAIdE,cAJc,cAIdA,cAJc;;AAY9Bd,EAAAA,SAAS,CAAE,YAAM;AAChB,QAAK,CAAEY,MAAP,EAAgB;AACfF,MAAAA,QAAQ,CAAE,IAAF,CAAR;AACA;AACA,KAJe,CAMhB;;;AACA,QAAKD,SAAS,CAACO,OAAf,EAAyB;AACxBP,MAAAA,SAAS,CAACO,OAAV,GAAoB,KAApB;AACAN,MAAAA,QAAQ,CAAE,IAAF,CAAR;AACA,KAHD,MAGO;AACN;AACAH,MAAAA,YAAY,IAAIA,YAAY,CAAEK,MAAF,EAAUE,cAAV,CAA5B;AACAN,MAAAA,aAAa,IAAIA,aAAa,CAAEJ,SAAS,CAAEQ,MAAF,CAAX,CAA9B;AACA;AACD,GAfQ,EAeN,CAAEA,MAAF,CAfM,CAAT;AAiBA,SAAO,IAAP;AACA;;AAED,eAAeP,YAAf","sourcesContent":["/**\n * WordPress dependencies\n */\n\nimport { useEffect, useRef } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { serialize } from '@wordpress/blocks';\n\n/** @typedef {import('../../index').OnSaveBlocks} OnSaveBlocks */\n/** @typedef {import('../../index').OnSaveSerialized} OnSaveSerialized */\n\n/**\n * Content saver\n * @param {object} props - Component props\n * @param {OnSaveBlocks} props.onSaveBlocks - Save blocks callback\n * @param {OnSaveSerialized} props.onSaveContent - Save content callback\n */\nfunction ContentSaver( props ) {\n\tconst { onSaveBlocks, onSaveContent } = props;\n\tconst firstTime = useRef( true );\n\tconst { setReady } = useDispatch( 'isolated/editor' );\n\tconst { blocks, ignoredContent } = useSelect(\n\t\t( select ) => ( {\n\t\t\tblocks: select( 'isolated/editor' ).getBlocks(),\n\t\t\tignoredContent: select( 'isolated/editor' ).getIgnoredContent(),\n\t\t} ),\n\t\t[]\n\t);\n\n\tuseEffect( () => {\n\t\tif ( ! blocks ) {\n\t\t\tsetReady( true );\n\t\t\treturn;\n\t\t}\n\n\t\t// We don't want the onSave to trigger when we first load our content. It's not a major problem, but it adds complexity to the caller if it might trigger a remote save\n\t\tif ( firstTime.current ) {\n\t\t\tfirstTime.current = false;\n\t\t\tsetReady( true );\n\t\t} else {\n\t\t\t// Save the content in the format wanted by the user\n\t\t\tonSaveBlocks && onSaveBlocks( blocks, ignoredContent );\n\t\t\tonSaveContent && onSaveContent( serialize( blocks ) );\n\t\t}\n\t}, [ blocks ] );\n\n\treturn null;\n}\n\nexport default ContentSaver;\n"],"file":"index.js"}