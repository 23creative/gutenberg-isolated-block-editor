{"version":3,"sources":["../../../src/components/with-registry-provider/index.js"],"names":["useState","useEffect","withRegistry","createRegistry","RegistryProvider","plugins","createHigherOrderComponent","storeConfig","blockEditorStoreConfig","coreEditorStoreConfig","applyMiddlewares","reusableStore","applyDefaultSettings","decoratedEditor","registries","STORE_NAME","withRegistryProvider","WrappedComponent","props","registry","settings","additionalProps","defaultSettings","persistenceKey","preferencesKey","defaultPreferences","customStores","iso","subRegistry","setSubRegistry","newRegistry","use","persistence","store","registerStore","blockEditorStore","persist","editorStore","selectors","select","map","push","name","config","cleanup","filter","item"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useState, useEffect } from '@wordpress/element';\nimport { withRegistry, createRegistry, RegistryProvider, plugins } from '@wordpress/data';\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { storeConfig as blockEditorStoreConfig } from '@wordpress/block-editor';\nimport { storeConfig as coreEditorStoreConfig } from '@wordpress/editor';\n\n/**\n * Internal dependencies\n */\nimport storeConfig from '../../store';\nimport applyMiddlewares from '../../store/middlewares';\nimport reusableStore from './reusable-store';\nimport applyDefaultSettings from '../default-settings';\nimport decoratedEditor from '../../store/core-editor';\n\n// Keep track of the registries we create so we can release them after the editor instance is removed\nlet registries = [];\n\nconst STORE_NAME = 'isolated/editor';\n\n/**\n * This is the core of having a multi-editor Gutenberg experience.\n *\n * We create a sub registry that contains copies of `core/block-editor`, `core/editor`, and STORE_NAME. These are specific to the editor instance and\n * provide the content for each editor, as well as overriding some core functions\n *\n * The key `persistenceKey` from the settings is used as the `localStorage` key to save Gutenberg preferences\n */\nconst withRegistryProvider = createHigherOrderComponent(\n\t( WrappedComponent ) =>\n\t\twithRegistry( ( props ) => {\n\t\t\tconst { registry, settings, ...additionalProps } = props;\n\t\t\tconst defaultSettings = applyDefaultSettings( settings );\n\t\t\tconst { persistenceKey, preferencesKey, defaultPreferences, customStores = [] } = defaultSettings.iso || {};\n\t\t\tconst [ subRegistry, setSubRegistry ] = useState( null );\n\n\t\t\tuseEffect( () => {\n\t\t\t\t// Create a new registry for this editor. We have the STORE_NAME for storing blocks and other data\n\t\t\t\t// and a duplicate of `core/block-editor` for storing block selections\n\t\t\t\tconst newRegistry = createRegistry(\n\t\t\t\t\t{\n\t\t\t\t\t\t'core/reusable-blocks': reusableStore,\n\t\t\t\t\t},\n\t\t\t\t\tregistry\n\t\t\t\t);\n\n\t\t\t\t// Enable the persistence plugin so we use settings in `localStorage`\n\t\t\t\tif ( persistenceKey ) {\n\t\t\t\t\tnewRegistry.use( plugins.persistence, {\n\t\t\t\t\t\tpersistenceKey,\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// Create our custom store\n\t\t\t\tconst store = newRegistry.registerStore(\n\t\t\t\t\tSTORE_NAME,\n\t\t\t\t\tstoreConfig( preferencesKey, defaultPreferences )\n\t\t\t\t);\n\n\t\t\t\t// Create the core/block-editor store separatley as we need the persistence plugin to be active\n\t\t\t\tconst blockEditorStore = newRegistry.registerStore( 'core/block-editor', {\n\t\t\t\t\t...blockEditorStoreConfig,\n\t\t\t\t\tpersist: [ 'preferences' ],\n\t\t\t\t} );\n\n\t\t\t\t// Duplicate the core/editor store so we can decorate it\n\t\t\t\tconst editorStore = newRegistry.registerStore( 'core/editor', {\n\t\t\t\t\t...coreEditorStoreConfig,\n\t\t\t\t\tselectors: {\n\t\t\t\t\t\t...coreEditorStoreConfig.selectors,\n\t\t\t\t\t\t...decoratedEditor( coreEditorStoreConfig.selectors, newRegistry.select ),\n\t\t\t\t\t},\n\t\t\t\t\tpersist: [ 'preferences' ],\n\t\t\t\t} );\n\n\t\t\t\t// Create any custom stores inside our registry\n\t\t\t\tcustomStores.map( ( store ) => {\n\t\t\t\t\tregistries.push( newRegistry.registerStore( store.name, store.config ) );\n\t\t\t\t} );\n\n\t\t\t\tregistries.push( store );\n\t\t\t\tregistries.push( blockEditorStore );\n\t\t\t\tregistries.push( editorStore );\n\n\t\t\t\t// This should be removed after the refactoring of the effects to controls.\n\t\t\t\tapplyMiddlewares( store );\n\t\t\t\tsetSubRegistry( newRegistry );\n\n\t\t\t\treturn function cleanup() {\n\t\t\t\t\tregistries = registries.filter( ( item ) => item !== store );\n\t\t\t\t};\n\t\t\t}, [ registry ] );\n\n\t\t\tif ( ! subRegistry ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<RegistryProvider value={ subRegistry }>\n\t\t\t\t\t<WrappedComponent { ...additionalProps } settings={ defaultSettings } />\n\t\t\t\t</RegistryProvider>\n\t\t\t);\n\t\t} ),\n\t'withRegistryProvider'\n);\n\nexport default withRegistryProvider;\n"],"file":"index.js"}