{"version":3,"sources":["../../../src/components/with-registry-provider/effects.js"],"names":["findKey","speak","getBlockType","doBlocksMatchTemplate","switchToBlockType","synchronizeBlocksWithTemplate","cloneBlock","_n","sprintf","create","toHTMLString","insert","remove","storeConfig","blockEditorStoreConfig","actions","replaceBlocks","selectBlock","setTemplateValidity","resetBlocks","selectionChange","selectors","getBlock","getBlocks","getSelectedBlockCount","getTemplateLock","getTemplate","isValidTemplate","getSelectionStart","validateBlocksToTemplate","action","store","state","getState","template","templateLock","isBlocksValidToTemplate","blocks","MERGE_BLOCKS","dispatch","clientIdA","clientIdB","blockA","blockAType","name","merge","clientId","blockB","blockBType","attributeKey","offset","selectedBlockType","attributeDefinition","attributes","canRestoreTextSelection","undefined","window","console","error","START_OF_SELECTED_AREA","cloneA","cloneB","selectedBlock","html","multilineTag","multiline","multilineWrapperTags","__unstableMultilineWrapperTags","preserveWhiteSpace","__unstablePreserveWhiteSpace","value","blocksWithTheSameType","length","updatedAttributes","newAttributeKey","v","indexOf","convertedHtml","convertedValue","newOffset","text","newValue","newHtml","slice","RESET_BLOCKS","MULTI_SELECT","blockCount","SYNCHRONIZE_TEMPLATE","updatedBlockList","MARK_AUTOMATIC_CHANGE","setTimeout","requestIdleCallback","callback","type"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { findKey } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { speak } from '@wordpress/a11y';\nimport {\n\tgetBlockType,\n\tdoBlocksMatchTemplate,\n\tswitchToBlockType,\n\tsynchronizeBlocksWithTemplate,\n\tcloneBlock,\n} from '@wordpress/blocks';\nimport { _n, sprintf } from '@wordpress/i18n';\nimport { create, toHTMLString, insert, remove } from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport { storeConfig as blockEditorStoreConfig } from '@wordpress/block-editor';\nconst {\n\treplaceBlocks,\n\tselectBlock,\n\tsetTemplateValidity,\n\tresetBlocks,\n\tselectionChange,\n} = blockEditorStoreConfig.actions;\nconst {\n\tgetBlock,\n\tgetBlocks,\n\tgetSelectedBlockCount,\n\tgetTemplateLock,\n\tgetTemplate,\n\tisValidTemplate,\n\tgetSelectionStart,\n} = blockEditorStoreConfig.selectors;\n\n/**\n * Block validity is a function of blocks state (at the point of a\n * reset) and the template setting. As a compromise to its placement\n * across distinct parts of state, it is implemented here as a side-\n * effect of the block reset action.\n *\n * @param {Object} action RESET_BLOCKS action.\n * @param {Object} store  Store instance.\n *\n * @return {?Object} New validity set action if validity has changed.\n */\nexport function validateBlocksToTemplate( action, store ) {\n\tconst state = store.getState();\n\tconst template = getTemplate( state );\n\tconst templateLock = getTemplateLock( state );\n\n\t// Unlocked templates are considered always valid because they act\n\t// as default values only.\n\tconst isBlocksValidToTemplate =\n\t\t! template || templateLock !== 'all' || doBlocksMatchTemplate( action.blocks, template );\n\n\t// Update if validity has changed.\n\tif ( isBlocksValidToTemplate !== isValidTemplate( state ) ) {\n\t\treturn setTemplateValidity( isBlocksValidToTemplate );\n\t}\n}\n\nexport default {\n\tMERGE_BLOCKS( action, store ) {\n\t\tconst { dispatch } = store;\n\t\tconst state = store.getState();\n\t\tconst [ clientIdA, clientIdB ] = action.blocks;\n\t\tconst blockA = getBlock( state, clientIdA );\n\t\tconst blockAType = getBlockType( blockA.name );\n\n\t\t// Only focus the previous block if it's not mergeable\n\t\tif ( ! blockAType.merge ) {\n\t\t\tdispatch( selectBlock( blockA.clientId ) );\n\t\t\treturn;\n\t\t}\n\n\t\tconst blockB = getBlock( state, clientIdB );\n\t\tconst blockBType = getBlockType( blockB.name );\n\t\tconst { clientId, attributeKey, offset } = getSelectionStart( state );\n\t\tconst selectedBlockType = clientId === clientIdA ? blockAType : blockBType;\n\t\tconst attributeDefinition = selectedBlockType.attributes[ attributeKey ];\n\t\tconst canRestoreTextSelection =\n\t\t\t( clientId === clientIdA || clientId === clientIdB ) &&\n\t\t\tattributeKey !== undefined &&\n\t\t\toffset !== undefined &&\n\t\t\t// We cannot restore text selection if the RichText identifier\n\t\t\t// is not a defined block attribute key. This can be the case if the\n\t\t\t// fallback intance ID is used to store selection (and no RichText\n\t\t\t// identifier is set), or when the identifier is wrong.\n\t\t\t!! attributeDefinition;\n\n\t\tif ( ! attributeDefinition ) {\n\t\t\tif ( typeof attributeKey === 'number' ) {\n\t\t\t\twindow.console.error(\n\t\t\t\t\t`RichText needs an identifier prop that is the block attribute key of the attribute it controls. Its type is expected to be a string, but was ${ typeof attributeKey }`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\twindow.console.error(\n\t\t\t\t\t'The RichText identifier prop does not match any attributes defined by the block.'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// A robust way to retain selection position through various transforms\n\t\t// is to insert a special character at the position and then recover it.\n\t\tconst START_OF_SELECTED_AREA = '\\u0086';\n\n\t\t// Clone the blocks so we don't insert the character in a \"live\" block.\n\t\tconst cloneA = cloneBlock( blockA );\n\t\tconst cloneB = cloneBlock( blockB );\n\n\t\tif ( canRestoreTextSelection ) {\n\t\t\tconst selectedBlock = clientId === clientIdA ? cloneA : cloneB;\n\t\t\tconst html = selectedBlock.attributes[ attributeKey ];\n\t\t\tconst {\n\t\t\t\tmultiline: multilineTag,\n\t\t\t\t__unstableMultilineWrapperTags: multilineWrapperTags,\n\t\t\t\t__unstablePreserveWhiteSpace: preserveWhiteSpace,\n\t\t\t} = attributeDefinition;\n\t\t\tconst value = insert(\n\t\t\t\tcreate( {\n\t\t\t\t\thtml,\n\t\t\t\t\tmultilineTag,\n\t\t\t\t\tmultilineWrapperTags,\n\t\t\t\t\tpreserveWhiteSpace,\n\t\t\t\t} ),\n\t\t\t\tSTART_OF_SELECTED_AREA,\n\t\t\t\toffset,\n\t\t\t\toffset\n\t\t\t);\n\n\t\t\tselectedBlock.attributes[ attributeKey ] = toHTMLString( {\n\t\t\t\tvalue,\n\t\t\t\tmultilineTag,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} );\n\t\t}\n\n\t\t// We can only merge blocks with similar types\n\t\t// thus, we transform the block to merge first\n\t\tconst blocksWithTheSameType =\n\t\t\tblockA.name === blockB.name ? [ cloneB ] : switchToBlockType( cloneB, blockA.name );\n\n\t\t// If the block types can not match, do nothing\n\t\tif ( ! blocksWithTheSameType || ! blocksWithTheSameType.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Calling the merge to update the attributes and remove the block to be merged\n\t\tconst updatedAttributes = blockAType.merge( cloneA.attributes, blocksWithTheSameType[ 0 ].attributes );\n\n\t\tif ( canRestoreTextSelection ) {\n\t\t\tconst newAttributeKey = findKey(\n\t\t\t\tupdatedAttributes,\n\t\t\t\t( v ) => typeof v === 'string' && v.indexOf( START_OF_SELECTED_AREA ) !== -1\n\t\t\t);\n\t\t\tconst convertedHtml = updatedAttributes[ newAttributeKey ];\n\t\t\tconst {\n\t\t\t\tmultiline: multilineTag,\n\t\t\t\t__unstableMultilineWrapperTags: multilineWrapperTags,\n\t\t\t\t__unstablePreserveWhiteSpace: preserveWhiteSpace,\n\t\t\t} = blockAType.attributes[ newAttributeKey ];\n\t\t\tconst convertedValue = create( {\n\t\t\t\thtml: convertedHtml,\n\t\t\t\tmultilineTag,\n\t\t\t\tmultilineWrapperTags,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} );\n\t\t\tconst newOffset = convertedValue.text.indexOf( START_OF_SELECTED_AREA );\n\t\t\tconst newValue = remove( convertedValue, newOffset, newOffset + 1 );\n\t\t\tconst newHtml = toHTMLString( {\n\t\t\t\tvalue: newValue,\n\t\t\t\tmultilineTag,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} );\n\n\t\t\tupdatedAttributes[ newAttributeKey ] = newHtml;\n\n\t\t\tdispatch( selectionChange( blockA.clientId, newAttributeKey, newOffset, newOffset ) );\n\t\t}\n\n\t\tdispatch(\n\t\t\treplaceBlocks(\n\t\t\t\t[ blockA.clientId, blockB.clientId ],\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t...blockA,\n\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t...blockA.attributes,\n\t\t\t\t\t\t\t...updatedAttributes,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t...blocksWithTheSameType.slice( 1 ),\n\t\t\t\t]\n\t\t\t)\n\t\t);\n\t},\n\tRESET_BLOCKS: [ validateBlocksToTemplate ],\n\tMULTI_SELECT: ( action, { getState } ) => {\n\t\tconst blockCount = getSelectedBlockCount( getState() );\n\n\t\tspeak(\n\t\t\tsprintf(\n\t\t\t\t/* translators: %s: number of selected blocks */\n\t\t\t\t_n( '%s block selected.', '%s blocks selected.', blockCount ),\n\t\t\t\tblockCount\n\t\t\t),\n\t\t\t'assertive'\n\t\t);\n\t},\n\tSYNCHRONIZE_TEMPLATE( action, { getState } ) {\n\t\tconst state = getState();\n\t\tconst blocks = getBlocks( state );\n\t\tconst template = getTemplate( state );\n\t\tconst updatedBlockList = synchronizeBlocksWithTemplate( blocks, template );\n\n\t\treturn resetBlocks( updatedBlockList );\n\t},\n\tMARK_AUTOMATIC_CHANGE( action, store ) {\n\t\tconst { setTimeout, requestIdleCallback = ( callback ) => setTimeout( callback, 100 ) } = window;\n\n\t\trequestIdleCallback( () => {\n\t\t\tstore.dispatch( { type: 'MARK_AUTOMATIC_CHANGE_FINAL' } );\n\t\t} );\n\t},\n};\n"],"file":"effects.js"}