{"version":3,"sources":["../../../src/components/block-editor-contents/index.js"],"names":["Popover","withDispatch","withSelect","compose","useEffect","parse","rawHandler","BlockEditorProvider","BlockEditorToolbar","BlockEditor","getInitialEditorContent","getInitialContent","settings","content","iso","patterns","currentPattern","editor","template","BlockEditorContents","props","blocks","updateBlocksWithoutUndo","updateBlocksWithUndo","selection","isEditing","editorMode","children","renderMoreMenu","onLoad","initialContent","length","select","getBlocks","getEditorSelection","getEditorMode","dispatch"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\n\nimport { Popover } from '@wordpress/components';\nimport { withDispatch, withSelect } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\nimport { useEffect } from '@wordpress/element';\nimport { parse, rawHandler } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { BlockEditorProvider } from '@wordpress/block-editor';\nimport BlockEditorToolbar from '../block-editor-toolbar';\nimport BlockEditor from '../block-editor';\nimport getInitialEditorContent from './editor-content';\n\n/** @typedef {import('../../store/editor/reducer').EditorMode} EditorMode */\n/** @typedef {import('../../index').BlockEditorSettings} BlockEditorSettings */\n/** @typedef {import('../../index').OnLoad} OnLoad */\n/** @typedef {import('../../index').OnMore} OnMore */\n\n/**\n * Get editor selection\n * @callback OnSelection\n */\n\n/**\n * Update callback\n * @callback OnUpdate\n * @param {object[]} blocks - Editor content to save\n */\n\nfunction getInitialContent( settings, content ) {\n\treturn getInitialEditorContent(\n\t\tsettings.iso.patterns,\n\t\tsettings.iso.currentPattern,\n\t\tsettings.editor.template,\n\t\tcontent\n\t);\n}\n\n/**\n * The editor itself, including toolbar\n *\n * @param {object} props - Component props\n * @param {object[]} props.blocks\n * @param {OnUpdate} props.updateBlocksWithoutUndo - Callback to update blocks\n * @param {OnUpdate} props.updateBlocksWithUndo - Callback to update blocks\n * @param {boolean} props.isEditing - Are we editing in this editor?\n * @param {EditorMode} props.editorMode - Visual or code?\n * @param {object} props.children - Child components\n * @param {BlockEditorSettings} props.settings - Settings\n * @param {OnMore} props.renderMoreMenu - Callback to render additional items in the more menu\n * @param {OnSelection} props.selection\n * @param {OnLoad} props.onLoad - Load initial blocks\n */\nfunction BlockEditorContents( props ) {\n\tconst {\n\t\tblocks,\n\t\tupdateBlocksWithoutUndo,\n\t\tupdateBlocksWithUndo,\n\t\tselection,\n\t\tisEditing,\n\t\teditorMode,\n\t} = props;\n\tconst { children, settings, renderMoreMenu, onLoad } = props;\n\n\t// Set initial content, if we have any, but only if there is no existing data in the editor (from elsewhere)\n\tuseEffect( () => {\n\t\tconst initialContent = getInitialContent( settings, onLoad ? onLoad( parse, rawHandler ) : [] );\n\n\t\tif ( initialContent.length > 0 && ( ! blocks || blocks.length === 0 ) ) {\n\t\t\tupdateBlocksWithoutUndo( initialContent );\n\t\t}\n\t}, [] );\n\n\treturn (\n\t\t<BlockEditorProvider\n\t\t\tvalue={ blocks || [] }\n\t\t\tonInput={ updateBlocksWithoutUndo }\n\t\t\tonChange={ updateBlocksWithUndo }\n\t\t\tuseSubRegistry={ false }\n\t\t\tselection={ selection }\n\t\t\tsettings={ settings.editor }\n\t\t>\n\t\t\t<BlockEditorToolbar editorMode={ editorMode } settings={ settings } renderMoreMenu={ renderMoreMenu } />\n\t\t\t<BlockEditor isEditing={ isEditing } editorMode={ editorMode }>\n\t\t\t\t{ children }\n\t\t\t</BlockEditor>\n\n\t\t\t<Popover.Slot />\n\t\t</BlockEditorProvider>\n\t);\n}\n\nexport default compose( [\n\twithSelect( ( select ) => {\n\t\tconst {\n\t\t\tgetBlocks,\n\t\t\tgetEditorSelection,\n\t\t\tgetEditorMode,\n\t\t\tisEditing,\n\t\t} = select( 'isolated/editor' );\n\n\t\treturn {\n\t\t\tblocks: getBlocks(),\n\t\t\tselection: getEditorSelection(),\n\t\t\tisEditing: isEditing(),\n\t\t\teditorMode: getEditorMode(),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\tconst { updateBlocksWithUndo, updateBlocksWithoutUndo } = dispatch( 'isolated/editor' );\n\n\t\treturn {\n\t\t\tupdateBlocksWithUndo,\n\t\t\tupdateBlocksWithoutUndo,\n\t\t};\n\t} ),\n] )( BlockEditorContents );\n"],"file":"index.js"}