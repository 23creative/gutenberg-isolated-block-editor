{"version":3,"sources":["../../../src/components/pattern-monitor/index.js"],"names":["__","useEffect","withDispatch","withSelect","compose","parse","PatternMonitor","props","currentPattern","updateBlocksWithoutUndo","content","select","getCurrentPattern","dispatch"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,EAAT,QAAmB,iBAAnB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,iBAAzC;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAyBC,KAAzB,EAAiC;AAChC,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAA8CF,KAApD,CADgC,CAGhC;;AACAN,EAAAA,SAAS,CAAE,MAAM;AAChB,QAAKO,cAAc,KAAK,IAAxB,EAA+B;AAC9B;AACA;;AAEDC,IAAAA,uBAAuB,CAAEJ,KAAK,CAAEG,cAAc,CAACE,OAAjB,CAAP,CAAvB;AACA,GANQ,EAMN,CAAEF,cAAF,CANM,CAAT;AAQA,SAAO,IAAP;AACA;;AAED,eAAeJ,OAAO,CAAE,CACvBD,UAAU,CAAIQ,MAAF,IAAc;AACzB,QAAM;AAAEC,IAAAA;AAAF,MAAwBD,MAAM,CAAE,iBAAF,CAApC;AAEA,SAAO;AACNH,IAAAA,cAAc,EAAEI,iBAAiB;AAD3B,GAAP;AAGA,CANS,CADa,EAQvBV,YAAY,CAAIW,QAAF,IAAgB;AAC7B,QAAM;AAAEJ,IAAAA;AAAF,MAA8BI,QAAQ,CAAE,iBAAF,CAA5C;AAEA,SAAO;AACNJ,IAAAA;AADM,GAAP;AAGA,CANW,CARW,CAAF,CAAP,CAeVH,cAfU,CAAf","sourcesContent":["/**\n * WordPress dependencies\n */\n\nimport { __ } from '@wordpress/i18n';\nimport { useEffect } from '@wordpress/element';\nimport { withDispatch, withSelect } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\nimport { parse } from '@wordpress/blocks';\n\n/** @typedef {import('../../index').BlockEditorSettings} BlockEditorSettings */\n/** @typedef {import('../../store/editor/reducer').Pattern} Pattern */\n\n/**\n * Update callback\n * @callback OnUpdate\n * @param {object[]} blocks - Editor content to save\n */\n\n/**\n * Sets up Gutenberg and the Isolated Block Editor\n *\n * An initial setup is performed, and is then reset each time the editor is focussed. This ensures we are applying the right\n * settings for this particular editor.\n *\n * @param {object} props - Component props\n * @param {BlockEditorSettings} props.settings - Settings\n * @param {Pattern} props.currentPattern - Currently selected pattern\n * @param {OnUpdate} props.updateBlocksWithoutUndo - Callback to update blocks\n */\nfunction PatternMonitor( props ) {\n\tconst { currentPattern, updateBlocksWithoutUndo } = props;\n\n\t// Monitor the current pattern and update the editor content if it changes\n\tuseEffect( () => {\n\t\tif ( currentPattern === null ) {\n\t\t\treturn;\n\t\t}\n\n\t\tupdateBlocksWithoutUndo( parse( currentPattern.content ) );\n\t}, [ currentPattern ] );\n\n\treturn null;\n}\n\nexport default compose( [\n\twithSelect( ( select ) => {\n\t\tconst { getCurrentPattern } = select( 'isolated/editor' );\n\n\t\treturn {\n\t\t\tcurrentPattern: getCurrentPattern(),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\tconst { updateBlocksWithoutUndo } = dispatch( 'isolated/editor' );\n\n\t\treturn {\n\t\t\tupdateBlocksWithoutUndo,\n\t\t};\n\t} ),\n] )( PatternMonitor );\n"],"file":"index.js"}