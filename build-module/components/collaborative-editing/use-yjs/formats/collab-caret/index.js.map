{"version":3,"sources":["../../../../../../src/components/collaborative-editing/use-yjs/formats/collab-caret/index.js"],"names":["memoize","classnames","applyFormat","registerFormatType","shouldUseWhiteText","FORMAT_NAME","applyCarets","record","carets","forEach","caret","start","end","id","color","label","isCollapsed","isShifted","text","length","type","attributes","class","title","style","join","getCarets","peers","richTextIdentifier","blockClientId","Object","entries","filter","peer","clientId","attributeKey","map","name","offset","settings","tagName","className","edit","__experimentalGetPropsForEditableTreePreparation","select","getPeers","__experimentalCreatePrepareEditableTree","formats","registerFormatCollabCaret"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport memoize from 'memize';\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { applyFormat, registerFormatType } from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport { shouldUseWhiteText } from './color-utils';\nimport './style.scss';\n\nexport const FORMAT_NAME = 'isolated/collab-caret';\n\n/**\n * Applies given carets to the given record.\n *\n * @param {Object} record The record to apply carets to.\n * @param {Array} carets The carets to apply.\n * @return {Object} A record with the carets applied.\n */\nexport function applyCarets( record, carets = [] ) {\n\tcarets.forEach( ( caret ) => {\n\t\tlet { start, end, id, color, label } = caret;\n\t\tconst isCollapsed = start === end;\n\t\tconst isShifted = isCollapsed && end >= record.text.length;\n\n\t\tif ( isShifted ) {\n\t\t\tstart = record.text.length - 1;\n\t\t}\n\n\t\tif ( isCollapsed ) {\n\t\t\tend = start + 1;\n\t\t}\n\n\t\trecord = applyFormat(\n\t\t\trecord,\n\t\t\t{\n\t\t\t\ttype: FORMAT_NAME,\n\t\t\t\tattributes: {\n\t\t\t\t\tid: 'iso-editor-collab-caret-' + id,\n\t\t\t\t\tclass: classnames( {\n\t\t\t\t\t\t'is-collapsed': isCollapsed,\n\t\t\t\t\t\t'is-shifted': isShifted,\n\t\t\t\t\t} ),\n\t\t\t\t\ttitle: label,\n\t\t\t\t\tstyle: [\n\t\t\t\t\t\t`--iso-editor-collab-caret-color: ${ color || '#2e3d48' };`,\n\t\t\t\t\t\t`--iso-editor-collab-caret-label-text-color: ${\n\t\t\t\t\t\t\tshouldUseWhiteText( color ) ? '#fff' : '#1e1e1e'\n\t\t\t\t\t\t};`,\n\t\t\t\t\t].join( ' ' ),\n\t\t\t\t},\n\t\t\t},\n\t\t\tstart,\n\t\t\tend\n\t\t);\n\t} );\n\n\treturn record;\n}\n\nconst getCarets = memoize( ( peers, richTextIdentifier, blockClientId ) => {\n\treturn Object.entries( peers )\n\t\t.filter( ( [ , peer ] ) => {\n\t\t\treturn (\n\t\t\t\tpeer?.start?.clientId === blockClientId &&\n\t\t\t\tpeer?.end?.clientId === blockClientId &&\n\t\t\t\tpeer.start.attributeKey === richTextIdentifier\n\t\t\t);\n\t\t} )\n\t\t.map( ( [ id, peer ] ) => ( {\n\t\t\tid,\n\t\t\tlabel: peer.name,\n\t\t\tstart: peer.start.offset,\n\t\t\tend: peer.end.offset,\n\t\t\tcolor: peer.color,\n\t\t} ) );\n} );\n\nexport const settings = {\n\ttitle: 'Collaboration peer caret',\n\ttagName: 'mark',\n\tclassName: 'iso-editor-collab-caret',\n\tattributes: {\n\t\tid: 'id',\n\t\tclassName: 'class',\n\t},\n\tedit() {\n\t\treturn null;\n\t},\n\t__experimentalGetPropsForEditableTreePreparation( select, { richTextIdentifier, blockClientId } ) {\n\t\treturn {\n\t\t\tcarets: getCarets( select( 'isolated/editor' ).getPeers(), richTextIdentifier, blockClientId ),\n\t\t};\n\t},\n\t__experimentalCreatePrepareEditableTree( { carets } ) {\n\t\treturn ( formats, text ) => {\n\t\t\tif ( ! carets?.length ) {\n\t\t\t\treturn formats;\n\t\t\t}\n\n\t\t\tlet record = { formats, text };\n\t\t\trecord = applyCarets( record, carets );\n\t\t\treturn record.formats;\n\t\t};\n\t},\n};\n\nexport const registerFormatCollabCaret = () => {\n\tregisterFormatType( FORMAT_NAME, settings );\n};\n"],"file":"index.js"}