{"version":3,"sources":["../../../../../../src/components/collaborative-editing/use-yjs/formats/collab-caret/index.js"],"names":["memoize","classnames","applyFormat","create","registerFormatType","__UNSTABLE_LINE_SEPARATOR","shouldUseWhiteText","FORMAT_NAME","applyCarets","record","multiline","carets","forEach","caret","start","end","id","color","label","isCollapsed","isAtMultilineItemEnd","multilineItemText","checkOffset","isShifted","isMultiline","text","length","lastGrapheme","Intl","Segmenter","segment","pop","undefined","offset","type","attributes","class","title","style","join","getCarets","peers","richTextIdentifier","blockClientId","Object","entries","filter","peer","clientId","attributeKey","map","name","getMultilineData","multilineTag","attributeValue","multilineItems","html","split","count","itemText","getStableBlockAttributeSelector","getBlockAttributes","settings","tagName","className","edit","__experimentalGetPropsForEditableTreePreparation","select","MULTILINE_ATTRIBUTES","values","blockName","getBlockName","getCollabPeers","blockAttributeSelector","__experimentalCreatePrepareEditableTree","formats","registerFormatCollabCaret"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport memoize from 'memize';\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { applyFormat, create, registerFormatType, __UNSTABLE_LINE_SEPARATOR } from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport { shouldUseWhiteText } from './color-utils';\nimport './style.scss';\n\n/**\n * @typedef MultilineData\n * @property {boolean} isMultiline - Whether this is a multiline attribute.\n * @property {(offset: number) => {isAtMultilineItemEnd: boolean, multilineItemText?: string}} checkOffset - Determine whether a given caret index is at the end of a multiline segment.\n */\n\nexport const FORMAT_NAME = 'isolated/collab-caret';\n\n/**\n * Applies given carets to the given record.\n *\n * @param {Object} record The record to apply carets to.\n * @param {MultilineData} multiline\n * @param {Array} carets The carets to apply.\n * @return {Object} A record with the carets applied.\n */\nexport function applyCarets( record, multiline, carets = [] ) {\n\tcarets.forEach( ( caret ) => {\n\t\tlet { start, end, id, color, label } = caret;\n\t\tconst isCollapsed = start === end;\n\t\tconst { isAtMultilineItemEnd, multilineItemText } = multiline.checkOffset( end );\n\t\tconst isShifted = isCollapsed && ( multiline.isMultiline ? isAtMultilineItemEnd : end >= record.text.length );\n\n\t\tconst text = isAtMultilineItemEnd ? multilineItemText : record.text;\n\n\t\t// Try to accurately get the `length` of the last character (i.e. grapheme) in case\n\t\t// the last character is an emoji, where \"<emoji>\".length can be more than 1.\n\t\t// For example, \"👩‍👩‍👧‍👦\".length === 11. (Intl.Segementer is still unsupported in Firefox)\n\t\t// @ts-ignore Intl.Segmenter is not in spec yet\n\t\tconst lastGrapheme = Intl.Segmenter\n\t\t\t? // @ts-ignore Intl.Segmenter is not in spec yet\n\t\t\t  [ ...new Intl.Segmenter().segment( text ) ].pop()?.segment\n\t\t\t: undefined;\n\t\tconst offset = lastGrapheme?.length ?? 1; // fall back to 1 if we can't accurately segment the last grapheme\n\n\t\tif ( isShifted ) {\n\t\t\tstart = end - offset;\n\t\t}\n\n\t\tif ( isCollapsed ) {\n\t\t\tend = start + offset;\n\t\t}\n\n\t\trecord = applyFormat(\n\t\t\trecord,\n\t\t\t{\n\t\t\t\ttype: FORMAT_NAME,\n\t\t\t\tattributes: {\n\t\t\t\t\tid: 'iso-editor-collab-caret-' + id,\n\t\t\t\t\tclass: classnames( {\n\t\t\t\t\t\t'is-collapsed': isCollapsed,\n\t\t\t\t\t\t'is-shifted': isShifted,\n\t\t\t\t\t} ),\n\t\t\t\t\ttitle: label,\n\t\t\t\t\tstyle: [\n\t\t\t\t\t\t`--iso-editor-collab-caret-color: ${ color || '#2e3d48' };`,\n\t\t\t\t\t\t`--iso-editor-collab-caret-label-text-color: ${\n\t\t\t\t\t\t\tshouldUseWhiteText( color ) ? '#fff' : '#1e1e1e'\n\t\t\t\t\t\t};`,\n\t\t\t\t\t].join( ' ' ),\n\t\t\t\t},\n\t\t\t},\n\t\t\tstart,\n\t\t\tend\n\t\t);\n\t} );\n\n\treturn record;\n}\n\nconst getCarets = memoize( ( peers, richTextIdentifier, blockClientId ) => {\n\treturn Object.entries( peers )\n\t\t.filter( ( [ , peer ] ) => {\n\t\t\treturn (\n\t\t\t\tpeer?.start?.clientId === blockClientId &&\n\t\t\t\tpeer?.end?.clientId === blockClientId &&\n\t\t\t\tpeer.start.attributeKey === richTextIdentifier\n\t\t\t);\n\t\t} )\n\t\t.map( ( [ id, peer ] ) => ( {\n\t\t\tid,\n\t\t\tlabel: peer.name,\n\t\t\tstart: peer.start.offset,\n\t\t\tend: peer.end.offset,\n\t\t\tcolor: peer.color,\n\t\t} ) );\n} );\n\n/**\n * @param {string} multilineTag\n * @param {string} attributeValue\n * @returns {MultilineData}\n * */\nconst getMultilineData = ( multilineTag, attributeValue ) => {\n\tconst multilineItems = multilineTag\n\t\t? create( { html: attributeValue, multilineTag } )?.text?.split?.( __UNSTABLE_LINE_SEPARATOR )\n\t\t: [];\n\n\treturn {\n\t\tisMultiline: !! multilineTag,\n\t\tcheckOffset: ( offset ) => {\n\t\t\tlet count = 0;\n\t\t\tfor ( const itemText of multilineItems ) {\n\t\t\t\tcount += itemText.length;\n\t\t\t\tif ( offset === count ) {\n\t\t\t\t\treturn { isAtMultilineItemEnd: true, multilineItemText: itemText };\n\t\t\t\t}\n\t\t\t\tcount += 1; // line separator character\n\t\t\t}\n\t\t\treturn { isAtMultilineItemEnd: false };\n\t\t},\n\t};\n};\n\nconst getStableBlockAttributeSelector = memoize( ( getBlockAttributes, blockClientId, attributeKey ) => () =>\n\tgetBlockAttributes( blockClientId )[ attributeKey ]\n);\n\nexport const settings = {\n\ttitle: 'Collaboration peer caret',\n\ttagName: 'mark',\n\tclassName: 'iso-editor-collab-caret',\n\tattributes: {\n\t\tid: 'id',\n\t\tclassName: 'class',\n\t},\n\tedit() {\n\t\treturn null;\n\t},\n\t__experimentalGetPropsForEditableTreePreparation( select, { richTextIdentifier, blockClientId } ) {\n\t\t// Adds special handling for certain block attributes that are known to be multiline,\n\t\t// e.g. the `values` attribute of the List block.\n\t\tconst MULTILINE_ATTRIBUTES = {\n\t\t\t'core/list': { values: { multilineTag: 'li' } },\n\t\t};\n\n\t\tconst blockName = select( 'core/block-editor' ).getBlockName( blockClientId );\n\t\tconst multilineTag = MULTILINE_ATTRIBUTES[ blockName ]?.[ richTextIdentifier ]?.multilineTag;\n\n\t\t// The properties in this return object need to be as stable as possible.\n\t\t// See https://github.com/WordPress/gutenberg/issues/23428\n\t\treturn {\n\t\t\tcarets: getCarets( select( 'isolated/editor' ).getCollabPeers(), richTextIdentifier, blockClientId ),\n\t\t\tmultilineTag,\n\t\t\tblockAttributeSelector: getStableBlockAttributeSelector(\n\t\t\t\tselect( 'core/block-editor' ).getBlockAttributes,\n\t\t\t\tblockClientId,\n\t\t\t\trichTextIdentifier\n\t\t\t),\n\t\t};\n\t},\n\t__experimentalCreatePrepareEditableTree( { carets, multilineTag, blockAttributeSelector } ) {\n\t\treturn ( formats, text ) => {\n\t\t\tif ( ! carets?.length ) {\n\t\t\t\treturn formats;\n\t\t\t}\n\n\t\t\tconst multiline = getMultilineData( multilineTag, blockAttributeSelector() );\n\t\t\tconst record = applyCarets( { formats, text }, multiline, carets );\n\n\t\t\treturn record.formats;\n\t\t};\n\t},\n};\n\nexport const registerFormatCollabCaret = () => {\n\tregisterFormatType( FORMAT_NAME, settings );\n};\n"],"file":"index.js"}