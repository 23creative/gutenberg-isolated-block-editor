{"version":3,"sources":["../../../../../src/components/collaborative-editing/use-yjs/algorithms/rich-text.js"],"names":["diff","isEqual","select","create","toHTMLString","__UNSTABLE_LINE_SEPARATOR","OBJECT_REPLACEMENT_CHARACTER","gutenFormatsToYFormats","formats","findIndexOfEqualFormat","needle","haystack","findIndex","f","visited","Array","length","fill","map","yFormats","forEach","formatsForChar","charIdx","fIdx","fLength","ci","foundIndex","push","format","namedGutenFormatToStandardTags","index","tagName","attributes","getFormatType","type","remappedEntries","Object","entries","key","value","fromEntries","getInferredMultilineTag","html","trimmedHtml","trim","test","undefined","applyHTMLDelta","htmlA","htmlB","richTextMap","richTextOpts","multilineTagA","multilineTagB","inferredMultilineTag","mergedRichTextOpts","multilineTag","set","a","b","stringDiff","simpleDiffString","text","previousCharFormats","nullifierFormat","reduce","acc","toDenseArray","arr","filter","x","replacementsDiff","simpleDiffArray","replacements","doc","transact","get","delete","remove","insert","yfa","yfb","formatsDiff","slice","keys","richTextMapToHTML","toString","replacement","replacementHTML","replace","stringAsMultiline","str","split","join"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport * as diff from 'lib0/diff';\nimport { isEqual } from 'lodash';\n\n/** @typedef {import(\"yjs\").XmlText} Y.XmlText */\n\n/**\n * WordPress dependencies\n */\nimport { select } from '@wordpress/data';\nimport { create, toHTMLString, __UNSTABLE_LINE_SEPARATOR } from '@wordpress/rich-text';\n\nconst OBJECT_REPLACEMENT_CHARACTER = '\\ufffc'; // defined in @wordpress/rich-text special-characters\n\n/**\n * Convert an array of Gutenberg RichText formats to an array of range-based Y.Text formats.\n *\n * @param {Object[]} formats\n * @returns {Object[]} Y.Text formats\n */\nexport function gutenFormatsToYFormats( formats ) {\n\tconst findIndexOfEqualFormat = ( needle, haystack = [] ) => haystack.findIndex( ( f ) => needle === f );\n\tconst visited = Array( formats.length )\n\t\t.fill( null )\n\t\t.map( () => ( {} ) );\n\tconst yFormats = [];\n\n\tformats.forEach( ( formatsForChar, charIdx ) => {\n\t\tformatsForChar.forEach( ( f, fIdx ) => {\n\t\t\tif ( visited[ charIdx ][ fIdx ] ) return;\n\n\t\t\tlet fLength = 1;\n\n\t\t\tfor ( let ci = charIdx + 1; ci < formats.length; ci++ ) {\n\t\t\t\tconst foundIndex = findIndexOfEqualFormat( f, formats[ ci ] );\n\t\t\t\tif ( foundIndex === -1 ) break;\n\n\t\t\t\tvisited[ ci ][ foundIndex ] = true;\n\t\t\t\tfLength++;\n\t\t\t}\n\n\t\t\tyFormats.push( {\n\t\t\t\tformat: namedGutenFormatToStandardTags( f ),\n\t\t\t\tindex: charIdx,\n\t\t\t\tlength: fLength,\n\t\t\t} );\n\t\t} );\n\t} );\n\n\treturn yFormats;\n}\n\n/**\n * Converts registered formats back to their standard tag/attribute names.\n *\n * For example, `core/bold` will be converted back to `strong`.\n */\nexport function namedGutenFormatToStandardTags( format ) {\n\tconst { tagName, attributes = {} } = select( 'core/rich-text' ).getFormatType( format.type );\n\tif ( ! format.attributes ) return { [ tagName ]: true };\n\n\tconst remappedEntries = Object.entries( format.attributes ).map( ( [ key, value ] ) => [\n\t\tattributes[ key ],\n\t\tvalue,\n\t] );\n\treturn { [ tagName ]: Object.fromEntries( remappedEntries ) };\n}\n\n// TODO: Unsolved problem\n// This is an imperfect inferral, so ideally we want to get this information\n// from Gutenberg's internal representation of the RichText.\nfunction getInferredMultilineTag( html ) {\n\tconst trimmedHtml = html.trim();\n\tif ( /^<li>/.test( trimmedHtml ) ) return 'li';\n\tif ( /^<p>/.test( trimmedHtml ) ) return 'p';\n\treturn undefined;\n}\n\n/**\n * Apply the delta between two HTML strings to a Y.XmlText.\n *\n * @param {string} htmlA\n * @param {string} htmlB\n * @param {import(\"yjs\").Map} richTextMap\n * @param {Object} [richTextOpts] Optional options object to pass @wordpress/rich-text create().\n */\nexport function applyHTMLDelta( htmlA, htmlB, richTextMap, richTextOpts = {} ) {\n\tconst [ multilineTagA, multilineTagB ] = [ htmlA, htmlB ].map( getInferredMultilineTag );\n\tconst inferredMultilineTag = multilineTagA || multilineTagB;\n\tconst mergedRichTextOpts = {\n\t\t...( inferredMultilineTag ? { multilineTag: inferredMultilineTag } : {} ),\n\t\t...richTextOpts,\n\t};\n\n\trichTextMap.set( 'multilineTag', inferredMultilineTag );\n\n\tconst a = create( { ...mergedRichTextOpts, html: htmlA } );\n\tconst b = create( { ...mergedRichTextOpts, html: htmlB } );\n\n\tconst stringDiff = diff.simpleDiffString( a.text, b.text );\n\n\t// By default, a Yjs string insertion will inherit the formats of the previous character.\n\t// We need to prevent this by inserting with an explicit format object nullifying the previous formats.\n\tconst previousCharFormats = b.formats[ stringDiff.index - 1 ];\n\tconst nullifierFormat = previousCharFormats?.reduce(\n\t\t( acc, { type } ) => ( {\n\t\t\t...acc,\n\t\t\t[ type ]: null,\n\t\t} ),\n\t\t{}\n\t);\n\n\t// Yjs can't do insertion operations on sparse arrays. Since replacements do not rely on\n\t// an index-based mapping with the full text, let's condense the arrays here.\n\tconst toDenseArray = ( arr ) => arr.filter( ( x ) => x );\n\tconst replacementsDiff = diff.simpleDiffArray( toDenseArray( a.replacements ), toDenseArray( b.replacements ) );\n\n\trichTextMap.doc?.transact( () => {\n\t\trichTextMap.get( 'xmlText' ).delete( stringDiff.index, stringDiff.remove );\n\t\trichTextMap.get( 'xmlText' ).insert( stringDiff.index, stringDiff.insert, nullifierFormat );\n\n\t\tconst yfa = gutenFormatsToYFormats( a.formats );\n\t\tconst yfb = gutenFormatsToYFormats( b.formats );\n\t\tconst formatsDiff = diff.simpleDiffArray( yfa, yfb, isEqual );\n\n\t\tif ( formatsDiff.remove ) {\n\t\t\tyfa.slice( formatsDiff.index, formatsDiff.index + formatsDiff.remove ).forEach( ( f ) => {\n\t\t\t\tconst tagName = Object.keys( f.format )[ 0 ];\n\t\t\t\trichTextMap.get( 'xmlText' ).format( f.index, f.length, { [ tagName ]: null } );\n\t\t\t} );\n\t\t}\n\t\tif ( formatsDiff.insert ) {\n\t\t\tformatsDiff.insert.forEach( ( f ) => richTextMap.get( 'xmlText' ).format( f.index, f.length, f.format ) );\n\t\t}\n\n\t\trichTextMap.get( 'replacements' ).delete( replacementsDiff.index, replacementsDiff.remove );\n\t\trichTextMap.get( 'replacements' ).insert( replacementsDiff.index, replacementsDiff.insert );\n\t} );\n}\n\n/**\n * Convert the RichText back from our Yjs representation to an HTML string.\n *\n * @param {import(\"yjs\").Map} richTextMap\n * @returns {string}\n */\nexport function richTextMapToHTML( richTextMap ) {\n\tlet text = richTextMap.get( 'xmlText' ).toString();\n\n\trichTextMap.get( 'replacements' ).forEach( ( replacement ) => {\n\t\tconst replacementHTML = toHTMLString( {\n\t\t\tvalue: { replacements: [ replacement ], formats: Array( 1 ), text: OBJECT_REPLACEMENT_CHARACTER },\n\t\t} );\n\t\ttext = text.replace( OBJECT_REPLACEMENT_CHARACTER, replacementHTML );\n\t} );\n\n\tconst multilineTag = richTextMap.get( 'multilineTag' );\n\n\treturn multilineTag ? stringAsMultiline( text, multilineTag ) : text;\n}\n\n/**\n * Wraps each line of a multiline string with the given tags.\n *\n * @param {string} str A multiline string delimited by __UNSTABLE_LINE_SEPARATOR.\n * @param {string} multilineTag The tag name to wrap each line with.\n * @returns\n */\nfunction stringAsMultiline( str, multilineTag ) {\n\treturn str\n\t\t.split( __UNSTABLE_LINE_SEPARATOR )\n\t\t.map( ( str ) => `<${ multilineTag }>${ str }</${ multilineTag }>` )\n\t\t.join( '' );\n}\n"],"file":"rich-text.js"}