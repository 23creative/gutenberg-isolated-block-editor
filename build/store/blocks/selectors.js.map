{"version":3,"sources":["../../../src/store/blocks/selectors.js"],"names":["getBlocks","state","blocks","present","getEditorSelection","selection","hasEditorUndo","collab","undoManager","undoStack","length","past","hasEditorRedo","redoStack","future","getEditCount","editCount"],"mappings":";;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASA,SAAT,CAAoBC,KAApB,EAA4B;AAClC,SAAOA,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAqBD,MAA5B;AACA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASE,kBAAT,CAA6BH,KAA7B,EAAqC;AAC3C,SAAOA,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAqBE,SAA5B;AACA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASC,aAAT,CAAwBL,KAAxB,EAAgC;AAAA;;AACtC,MAAK,8BAAeA,KAAf,MAA2B,QAAhC,EAA2C,OAAO,KAAP;;AAE3C,uBAAKA,KAAK,CAACM,MAAX,0CAAK,cAAcC,WAAnB,EAAiC;AAChC,WAAO,CAAC,CAAEP,KAAK,CAACM,MAAN,CAAaC,WAAb,CAAyBC,SAAzB,CAAmCC,MAA7C;AACA;;AAED,SAAOT,KAAK,CAACC,MAAN,CAAaS,IAAb,CAAkBD,MAAlB,GAA2B,CAAlC;AACA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASE,aAAT,CAAwBX,KAAxB,EAAgC;AAAA;;AACtC,MAAK,8BAAeA,KAAf,MAA2B,QAAhC,EAA2C,OAAO,KAAP;;AAE3C,wBAAKA,KAAK,CAACM,MAAX,2CAAK,eAAcC,WAAnB,EAAiC;AAChC,WAAO,CAAC,CAAEP,KAAK,CAACM,MAAN,CAAaC,WAAb,CAAyBK,SAAzB,CAAmCH,MAA7C;AACA;;AAED,SAAOT,KAAK,CAACC,MAAN,CAAaY,MAAb,CAAoBJ,MAApB,GAA6B,CAApC;AACA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASK,YAAT,CAAuBd,KAAvB,EAA+B;AACrC,SAAOA,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAqBa,SAA5B;AACA","sourcesContent":["import { getEditorMode } from '../editor/selectors';\n\n/**\n * Get blocks from edit history\n * @param {object} state - Current state\n * @returns {object[]}\n */\nexport function getBlocks( state ) {\n\treturn state.blocks.present.blocks;\n}\n\n/**\n * Get selection\n * @param {object} state - Current state\n * @returns {object}\n */\nexport function getEditorSelection( state ) {\n\treturn state.blocks.present.selection;\n}\n\n/**\n * Is undo possible?\n * @param {object} state - Current state\n * @returns {boolean}\n */\nexport function hasEditorUndo( state ) {\n\tif ( getEditorMode( state ) !== 'visual' ) return false;\n\n\tif ( state.collab?.undoManager ) {\n\t\treturn !! state.collab.undoManager.undoStack.length;\n\t}\n\n\treturn state.blocks.past.length > 0;\n}\n\n/**\n * Is redo possible?\n * @param {object} state - Current state\n * @returns {boolean}\n */\nexport function hasEditorRedo( state ) {\n\tif ( getEditorMode( state ) !== 'visual' ) return false;\n\n\tif ( state.collab?.undoManager ) {\n\t\treturn !! state.collab.undoManager.redoStack.length;\n\t}\n\n\treturn state.blocks.future.length > 0;\n}\n\n/**\n * Get current edit count\n * @param {object} state - Current state\n * @returns {number}\n */\nexport function getEditCount( state ) {\n\treturn state.blocks.present.editCount;\n}\n"],"file":"selectors.js"}