{"version":3,"sources":["../../../src/components/with-registry-provider/index.js"],"names":["registries","STORE_NAME","withRegistryProvider","WrappedComponent","props","registry","settings","additionalProps","defaultSettings","iso","persistenceKey","preferencesKey","defaultPreferences","customStores","subRegistry","setSubRegistry","newRegistry","reusableStore","use","plugins","persistence","store","registerStore","blockEditorStore","blockEditorStoreConfig","persist","editorStore","coreEditorStoreConfig","selectors","select","map","push","name","config","cleanup","filter","item"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useState, useEffect } from '@wordpress/element';\nimport { withRegistry, createRegistry, RegistryProvider, plugins } from '@wordpress/data';\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { storeConfig as blockEditorStoreConfig } from '@wordpress/block-editor';\nimport { storeConfig as coreEditorStoreConfig } from '@wordpress/editor';\n\n/**\n * Internal dependencies\n */\nimport storeConfig from '../../store';\nimport applyMiddlewares from '../../store/middlewares';\nimport applyBlockEditorMiddlewares from './middlewares';\nimport reusableStore from './reusable-store';\nimport applyDefaultSettings from '../default-settings';\nimport decoratedEditor from '../../store/core-editor';\n\n// Keep track of the registries we create so we can release them after the editor instance is removed\nlet registries = [];\n\nconst STORE_NAME = 'isolated/editor';\n\n/**\n * This is the core of having a multi-editor Gutenberg experience.\n *\n * We create a sub registry that contains copies of `core/block-editor`, `core/editor`, and STORE_NAME. These are specific to the editor instance and\n * provide the content for each editor, as well as overriding some core functions\n *\n * The key `persistenceKey` from the settings is used as the `localStorage` key to save Gutenberg preferences\n */\nconst withRegistryProvider = createHigherOrderComponent(\n\t( WrappedComponent ) =>\n\t\twithRegistry( ( props ) => {\n\t\t\tconst { registry, settings, ...additionalProps } = props;\n\t\t\tconst defaultSettings = applyDefaultSettings( settings );\n\t\t\tconst { persistenceKey, preferencesKey, defaultPreferences, customStores = [] } = defaultSettings.iso;\n\t\t\tconst [ subRegistry, setSubRegistry ] = useState( null );\n\n\t\t\tuseEffect( () => {\n\t\t\t\t// Create a new registry for this editor. We have the STORE_NAME for storing blocks and other data\n\t\t\t\t// and a duplicate of `core/block-editor` for storing block selections\n\t\t\t\tconst newRegistry = createRegistry(\n\t\t\t\t\t{\n\t\t\t\t\t\t'core/reusable-blocks': reusableStore,\n\t\t\t\t\t},\n\t\t\t\t\tregistry\n\t\t\t\t);\n\n\t\t\t\t// Enable the persistence plugin so we use settings in `localStorage`\n\t\t\t\tif ( persistenceKey ) {\n\t\t\t\t\tnewRegistry.use( plugins.persistence, {\n\t\t\t\t\t\tpersistenceKey,\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// Create our custom store\n\t\t\t\tconst store = newRegistry.registerStore(\n\t\t\t\t\tSTORE_NAME,\n\t\t\t\t\tstoreConfig( preferencesKey, defaultPreferences )\n\t\t\t\t);\n\n\t\t\t\t// Create the core/block-editor store separatley as we need the persistence plugin to be active\n\t\t\t\tconst blockEditorStore = newRegistry.registerStore( 'core/block-editor', {\n\t\t\t\t\t...blockEditorStoreConfig,\n\t\t\t\t\tpersist: [ 'preferences' ],\n\t\t\t\t} );\n\n\t\t\t\t// Duplicate the core/editor store so we can decorate it\n\t\t\t\tconst editorStore = newRegistry.registerStore( 'core/editor', {\n\t\t\t\t\t...coreEditorStoreConfig,\n\t\t\t\t\tselectors: {\n\t\t\t\t\t\t...coreEditorStoreConfig.selectors,\n\t\t\t\t\t\t...decoratedEditor( coreEditorStoreConfig.selectors, newRegistry.select ),\n\t\t\t\t\t},\n\t\t\t\t\tpersist: [ 'preferences' ],\n\t\t\t\t} );\n\n\t\t\t\t// Create any custom stores inside our registry\n\t\t\t\tcustomStores.map( ( store ) => {\n\t\t\t\t\tregistries.push( newRegistry.registerStore( store.name, store.config ) );\n\t\t\t\t} );\n\n\t\t\t\tregistries.push( store );\n\t\t\t\tregistries.push( blockEditorStore );\n\t\t\t\tregistries.push( editorStore );\n\n\t\t\t\t// This should be removed after the refactoring of the effects to controls.\n\t\t\t\tapplyMiddlewares( store );\n\t\t\t\tsetSubRegistry( newRegistry );\n\n\t\t\t\tapplyBlockEditorMiddlewares( blockEditorStore );\n\n\t\t\t\treturn function cleanup() {\n\t\t\t\t\tregistries = registries.filter( ( item ) => item !== store );\n\t\t\t\t};\n\t\t\t}, [ registry ] );\n\n\t\t\tif ( ! subRegistry ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<RegistryProvider value={ subRegistry }>\n\t\t\t\t\t<WrappedComponent { ...additionalProps } settings={ defaultSettings } />\n\t\t\t\t</RegistryProvider>\n\t\t\t);\n\t\t} ),\n\t'withRegistryProvider'\n);\n\nexport default withRegistryProvider;\n"],"file":"index.js"}