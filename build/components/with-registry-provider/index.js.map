{"version":3,"sources":["../../../src/components/with-registry-provider/index.js"],"names":["registries","STORE_NAME","withRegistryProvider","WrappedComponent","props","registry","settings","additionalProps","defaultSettings","iso","persistenceKey","preferencesKey","defaultPreferences","subRegistry","setSubRegistry","newRegistry","reusableStore","use","plugins","persistence","store","registerStore","editorStore","blockEditorStoreConfig","persist","push","cleanup","filter","item"],"mappings":";;;;;;;;;;;;;;;;;AAGA;;AACA;;AACA;;AACA;;AAKA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA,IAAIA,UAAU,GAAG,EAAjB;AAEA,IAAMC,UAAU,GAAG,iBAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,oBAAoB,GAAG,yCAC5B,UAAEC,gBAAF;AAAA,SACC,wBAAc,UAAEC,KAAF,EAAa;AAAA,QAClBC,QADkB,GACyBD,KADzB,CAClBC,QADkB;AAAA,QACRC,QADQ,GACyBF,KADzB,CACRE,QADQ;AAAA,QACKC,eADL,6CACyBH,KADzB;AAE1B,QAAMI,eAAe,GAAG,iCAAsBF,QAAtB,CAAxB;AAF0B,+BAGqCE,eAAe,CAACC,GAHrD;AAAA,QAGlBC,cAHkB,wBAGlBA,cAHkB;AAAA,QAGFC,cAHE,wBAGFA,cAHE;AAAA,QAGcC,kBAHd,wBAGcA,kBAHd;;AAAA,oBAIc,uBAAU,IAAV,CAJd;AAAA;AAAA,QAIlBC,WAJkB;AAAA,QAILC,cAJK;;AAM1B,4BAAW,YAAM;AAChB;AACA;AACA,UAAMC,WAAW,GAAG,0BACnB;AACC,gCAAwBC;AADzB,OADmB,EAInBX,QAJmB,CAApB,CAHgB,CAUhB;;AACA,UAAKK,cAAL,EAAsB;AACrBK,QAAAA,WAAW,CAACE,GAAZ,CAAiBC,cAAQC,WAAzB,EAAsC;AACrCT,UAAAA,cAAc,EAAdA;AADqC,SAAtC;AAGA,OAfe,CAiBhB;;;AACA,UAAMU,KAAK,GAAGL,WAAW,CAACM,aAAZ,CACbpB,UADa,EAEb,uBAAaU,cAAb,EAA6BC,kBAA7B,CAFa,CAAd,CAlBgB,CAuBhB;;AACA,UAAMU,WAAW,GAAGP,WAAW,CAACM,aAAZ,CAA2B,mBAA3B,kCAChBE,wBADgB;AAEnBC,QAAAA,OAAO,EAAE,CAAE,aAAF;AAFU,SAApB;AAKAxB,MAAAA,UAAU,CAACyB,IAAX,CAAiBL,KAAjB;AACApB,MAAAA,UAAU,CAACyB,IAAX,CAAiBH,WAAjB,EA9BgB,CAgChB;;AACA,mCAAkBF,KAAlB;AACAN,MAAAA,cAAc,CAAEC,WAAF,CAAd;AAEA,oCAA6BO,WAA7B;AAEA,aAAO,SAASI,OAAT,GAAmB;AACzB1B,QAAAA,UAAU,GAAGA,UAAU,CAAC2B,MAAX,CAAmB,UAAEC,IAAF;AAAA,iBAAYA,IAAI,KAAKR,KAAT,IAAkBQ,IAAI,KAAKN,WAAvC;AAAA,SAAnB,CAAb;AACA,OAFD;AAGA,KAzCD,EAyCG,CAAEjB,QAAF,CAzCH;;AA2CA,QAAK,CAAEQ,WAAP,EAAqB;AACpB,aAAO,IAAP;AACA;;AAED,WACC,cAAC,sBAAD;AAAkB,MAAA,KAAK,EAAGA;AAA1B,OACC,cAAC,gBAAD,gCAAuBN,eAAvB;AAAyC,MAAA,QAAQ,EAAGC;AAApD,OADD,CADD;AAKA,GA1DD,CADD;AAAA,CAD4B,EA6D5B,sBA7D4B,CAA7B;eAgEeN,oB","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useState, useEffect } from '@wordpress/element';\nimport { withRegistry, createRegistry, RegistryProvider, plugins } from '@wordpress/data';\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { storeConfig as blockEditorStoreConfig } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport storeConfig from '../../store';\nimport applyMiddlewares from '../../store/middlewares';\nimport applyBlockEditorMiddlewares from './middlewares';\nimport reusableStore from './reusable-store';\nimport applyDefaultSettings from '../default-settings';\n\n// Keep track of the registries we create so we can release them after the editor instance is removed\nlet registries = [];\n\nconst STORE_NAME = 'isolated/editor';\n\n/**\n * This is the core of having a multi-editor Gutenberg experience.\n *\n * We create a sub registry that contains copies of `core/block-editor`, `core/editor`, and STORE_NAME. These are specific to the editor instance and\n * provide the content for each editor, as well as overriding some core functions\n *\n * The key `persistenceKey` from the settings is used as the `localStorage` key to save Gutenberg preferences\n */\nconst withRegistryProvider = createHigherOrderComponent(\n\t( WrappedComponent ) =>\n\t\twithRegistry( ( props ) => {\n\t\t\tconst { registry, settings, ...additionalProps } = props;\n\t\t\tconst defaultSettings = applyDefaultSettings( settings );\n\t\t\tconst { persistenceKey, preferencesKey, defaultPreferences } = defaultSettings.iso;\n\t\t\tconst [ subRegistry, setSubRegistry ] = useState( null );\n\n\t\t\tuseEffect( () => {\n\t\t\t\t// Create a new registry for this editor. We have the STORE_NAME for storing blocks and other data\n\t\t\t\t// and a duplicate of `core/block-editor` for storing block selections\n\t\t\t\tconst newRegistry = createRegistry(\n\t\t\t\t\t{\n\t\t\t\t\t\t'core/reusable-blocks': reusableStore,\n\t\t\t\t\t},\n\t\t\t\t\tregistry\n\t\t\t\t);\n\n\t\t\t\t// Enable the persistence plugin so we use settings in `localStorage`\n\t\t\t\tif ( persistenceKey ) {\n\t\t\t\t\tnewRegistry.use( plugins.persistence, {\n\t\t\t\t\t\tpersistenceKey,\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// Create our custom store\n\t\t\t\tconst store = newRegistry.registerStore(\n\t\t\t\t\tSTORE_NAME,\n\t\t\t\t\tstoreConfig( preferencesKey, defaultPreferences )\n\t\t\t\t);\n\n\t\t\t\t// Create the core/block-editor store separatley as we need the persistence plugin to be active\n\t\t\t\tconst editorStore = newRegistry.registerStore( 'core/block-editor', {\n\t\t\t\t\t...blockEditorStoreConfig,\n\t\t\t\t\tpersist: [ 'preferences' ],\n\t\t\t\t} );\n\n\t\t\t\tregistries.push( store );\n\t\t\t\tregistries.push( editorStore );\n\n\t\t\t\t// This should be removed after the refactoring of the effects to controls.\n\t\t\t\tapplyMiddlewares( store );\n\t\t\t\tsetSubRegistry( newRegistry );\n\n\t\t\t\tapplyBlockEditorMiddlewares( editorStore );\n\n\t\t\t\treturn function cleanup() {\n\t\t\t\t\tregistries = registries.filter( ( item ) => item !== store && item !== editorStore );\n\t\t\t\t};\n\t\t\t}, [ registry ] );\n\n\t\t\tif ( ! subRegistry ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<RegistryProvider value={ subRegistry }>\n\t\t\t\t\t<WrappedComponent { ...additionalProps } settings={ defaultSettings } />\n\t\t\t\t</RegistryProvider>\n\t\t\t);\n\t\t} ),\n\t'withRegistryProvider'\n);\n\nexport default withRegistryProvider;\n"],"file":"index.js"}