{"version":3,"sources":["../../../../src/components/with-registry-provider/reusable-store/controls.js"],"names":["convertBlockToStatic","clientId","type","convertBlocksToReusable","clientIds","deleteReusableBlock","id","controls","CONVERT_BLOCK_TO_STATIC","registry","oldBlock","select","getBlock","reusableBlock","getEditedEntityRecord","attributes","ref","newBlocks","content","dispatch","replaceBlocks","CONVERT_BLOCKS_TO_REUSABLE","title","getBlocksByClientId","status","saveEntityRecord","updatedRecord","newBlock","reusableBlocksStore","__experimentalSetEditingReusableBlock","DELETE_REUSABLE_BLOCK","allBlocks","getBlocks","associatedBlocks","filter","block","associatedBlockClientIds","map","length","removeBlocks","deleteEntityRecord"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { isReusableBlock, createBlock, parse, serialize } from '@wordpress/blocks';\nimport { createRegistryControl } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Convert a reusable block to a static block effect handler\n *\n * @param {string}  clientId Block ID.\n * @return {Object} control descriptor.\n */\nexport function convertBlockToStatic( clientId ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_STATIC',\n\t\tclientId,\n\t};\n}\n\n/**\n * Convert a static block to a reusable block effect handler\n *\n * @param {Array}  clientIds Block IDs.\n * @return {Object} control descriptor.\n */\nexport function convertBlocksToReusable( clientIds ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCKS_TO_REUSABLE',\n\t\tclientIds,\n\t};\n}\n\n/**\n * Deletes a reusable block.\n *\n * @param {string} id Reusable block ID.\n * @return {Object} control descriptor.\n */\nexport function deleteReusableBlock( id ) {\n\treturn {\n\t\ttype: 'DELETE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\nconst controls = {\n\tCONVERT_BLOCK_TO_STATIC: createRegistryControl( ( registry ) => ( { clientId } ) => {\n\t\tconst oldBlock = registry.select( 'core/block-editor' ).getBlock( clientId );\n\t\tconst reusableBlock = registry\n\t\t\t.select( 'core' )\n\t\t\t.getEditedEntityRecord( 'postType', 'wp_block', oldBlock.attributes.ref );\n\n\t\tconst newBlocks = parse( reusableBlock.content );\n\t\tregistry.dispatch( 'core/block-editor' ).replaceBlocks( oldBlock.clientId, newBlocks );\n\t} ),\n\n\tCONVERT_BLOCKS_TO_REUSABLE: createRegistryControl(\n\t\t( registry ) =>\n\t\t\tasync function ( { clientIds } ) {\n\t\t\t\tconst reusableBlock = {\n\t\t\t\t\ttitle: __( 'Untitled Reusable Block' ),\n\t\t\t\t\tcontent: serialize( registry.select( 'core/block-editor' ).getBlocksByClientId( clientIds ) ),\n\t\t\t\t\tstatus: 'publish',\n\t\t\t\t};\n\n\t\t\t\tconst updatedRecord = await registry\n\t\t\t\t\t.dispatch( 'core' )\n\t\t\t\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\n\n\t\t\t\tconst newBlock = createBlock( 'core/block', {\n\t\t\t\t\tref: updatedRecord.id,\n\t\t\t\t} );\n\t\t\t\tregistry.dispatch( 'core/block-editor' ).replaceBlocks( clientIds, newBlock );\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( reusableBlocksStore )\n\t\t\t\t\t.__experimentalSetEditingReusableBlock( newBlock.clientId, true );\n\t\t\t}\n\t),\n\n\tDELETE_REUSABLE_BLOCK: createRegistryControl(\n\t\t( registry ) =>\n\t\t\tasync function ( { id } ) {\n\t\t\t\tconst reusableBlock = registry.select( 'core' ).getEditedEntityRecord( 'postType', 'wp_block', id );\n\n\t\t\t\t// Don't allow a reusable block with a temporary ID to be deleted\n\t\t\t\tif ( ! reusableBlock ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Remove any other blocks that reference this reusable block\n\t\t\t\tconst allBlocks = registry.select( 'core/block-editor' ).getBlocks();\n\t\t\t\tconst associatedBlocks = allBlocks.filter(\n\t\t\t\t\t( block ) => isReusableBlock( block ) && block.attributes.ref === id\n\t\t\t\t);\n\t\t\t\tconst associatedBlockClientIds = associatedBlocks.map( ( block ) => block.clientId );\n\n\t\t\t\t// Remove the parsed block.\n\t\t\t\tif ( associatedBlockClientIds.length ) {\n\t\t\t\t\tregistry.dispatch( 'core/block-editor' ).removeBlocks( associatedBlockClientIds );\n\t\t\t\t}\n\n\t\t\t\tawait registry.dispatch( 'core' ).deleteEntityRecord( 'postType', 'wp_block', id );\n\t\t\t}\n\t),\n};\n\nexport default controls;\n"],"file":"controls.js"}