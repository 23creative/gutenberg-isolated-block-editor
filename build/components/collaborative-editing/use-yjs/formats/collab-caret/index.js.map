{"version":3,"sources":["../../../../../../src/components/collaborative-editing/use-yjs/formats/collab-caret/index.js"],"names":["FORMAT_NAME","applyCarets","record","carets","forEach","caret","start","end","id","color","label","isCollapsed","isShifted","text","length","type","attributes","title","style","join","getCarets","peers","richTextIdentifier","blockClientId","Object","entries","filter","peer","clientId","attributeKey","map","name","offset","settings","tagName","className","edit","__experimentalGetPropsForEditableTreePreparation","select","getPeers","__experimentalCreatePrepareEditableTree","formats","registerFormatCollabCaret"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport memoize from 'memize';\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { applyFormat, registerFormatType } from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport { shouldUseWhiteText } from './color-utils';\nimport './style.scss';\n\nconst FORMAT_NAME = 'isolated/collab-caret';\n\n/**\n * Applies given carets to the given record.\n *\n * @param {Object} record The record to apply carets to.\n * @param {Array} carets The carets to apply.\n * @return {Object} A record with the carets applied.\n */\nexport function applyCarets( record, carets = [] ) {\n\tcarets.forEach( ( caret ) => {\n\t\tlet { start, end, id, color, label } = caret;\n\t\tconst isCollapsed = start === end;\n\t\tconst isShifted = isCollapsed && end >= record.text.length;\n\n\t\tif ( isShifted ) {\n\t\t\tstart = record.text.length - 1;\n\t\t}\n\n\t\tif ( isCollapsed ) {\n\t\t\tend = start + 1;\n\t\t}\n\n\t\trecord = applyFormat(\n\t\t\trecord,\n\t\t\t{\n\t\t\t\ttype: FORMAT_NAME,\n\t\t\t\tattributes: {\n\t\t\t\t\tid: 'iso-editor-collab-caret-' + id,\n\t\t\t\t\tclass: classnames( {\n\t\t\t\t\t\t'is-collapsed': isCollapsed,\n\t\t\t\t\t\t'is-shifted': isShifted,\n\t\t\t\t\t} ),\n\t\t\t\t\ttitle: label,\n\t\t\t\t\tstyle: [\n\t\t\t\t\t\t`--iso-editor-collab-caret-color: ${ color || '#2e3d48' };`,\n\t\t\t\t\t\t`--iso-editor-collab-caret-label-text-color: ${\n\t\t\t\t\t\t\tshouldUseWhiteText( color ) ? '#fff' : 'currentColor'\n\t\t\t\t\t\t};`,\n\t\t\t\t\t].join( ' ' ),\n\t\t\t\t},\n\t\t\t},\n\t\t\tstart,\n\t\t\tend\n\t\t);\n\t} );\n\n\treturn record;\n}\n\nconst getCarets = memoize( ( peers, richTextIdentifier, blockClientId ) => {\n\treturn Object.entries( peers )\n\t\t.filter( ( [ , peer ] ) => {\n\t\t\treturn (\n\t\t\t\tpeer?.start?.clientId === blockClientId &&\n\t\t\t\tpeer?.end?.clientId === blockClientId &&\n\t\t\t\tpeer.start.attributeKey === richTextIdentifier\n\t\t\t);\n\t\t} )\n\t\t.map( ( [ id, peer ] ) => ( {\n\t\t\tid,\n\t\t\tlabel: peer.name,\n\t\t\tstart: peer.start.offset,\n\t\t\tend: peer.end.offset,\n\t\t\tcolor: peer.color,\n\t\t} ) );\n} );\n\nexport const settings = {\n\ttitle: 'Collaboration peer caret',\n\ttagName: 'mark',\n\tclassName: 'iso-editor-collab-caret',\n\tattributes: {\n\t\tid: 'id',\n\t\tclassName: 'class',\n\t},\n\tedit() {\n\t\treturn null;\n\t},\n\t__experimentalGetPropsForEditableTreePreparation( select, { richTextIdentifier, blockClientId } ) {\n\t\treturn {\n\t\t\tcarets: getCarets( select( 'isolated/editor' ).getPeers(), richTextIdentifier, blockClientId ),\n\t\t};\n\t},\n\t__experimentalCreatePrepareEditableTree( { carets } ) {\n\t\treturn ( formats, text ) => {\n\t\t\tif ( ! carets?.length ) {\n\t\t\t\treturn formats;\n\t\t\t}\n\n\t\t\tlet record = { formats, text };\n\t\t\trecord = applyCarets( record, carets );\n\t\t\treturn record.formats;\n\t\t};\n\t},\n};\n\nexport const registerFormatCollabCaret = () => {\n\tregisterFormatType( FORMAT_NAME, settings );\n};\n"],"file":"index.js"}