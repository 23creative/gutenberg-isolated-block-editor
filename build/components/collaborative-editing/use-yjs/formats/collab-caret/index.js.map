{"version":3,"sources":["../../../../../../src/components/collaborative-editing/use-yjs/formats/collab-caret/index.js"],"names":["FORMAT_NAME","applyCarets","record","multiline","carets","forEach","caret","start","end","id","color","label","isCollapsed","checkOffset","isAtMultilineItemEnd","multilineItemText","isShifted","isMultiline","text","length","lastGrapheme","Intl","Segmenter","segment","pop","undefined","offset","type","attributes","title","style","join","getCarets","peers","richTextIdentifier","blockClientId","Object","entries","filter","peer","clientId","attributeKey","map","name","getMultilineData","multilineTag","attributeValue","multilineItems","html","split","__UNSTABLE_LINE_SEPARATOR","count","itemText","getStableBlockAttributeSelector","getBlockAttributes","settings","tagName","className","edit","__experimentalGetPropsForEditableTreePreparation","select","MULTILINE_ATTRIBUTES","values","blockName","getBlockName","getCollabPeers","blockAttributeSelector","__experimentalCreatePrepareEditableTree","formats","registerFormatCollabCaret"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport memoize from 'memize';\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { applyFormat, create, registerFormatType, __UNSTABLE_LINE_SEPARATOR } from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport { shouldUseWhiteText } from './color-utils';\nimport './style.scss';\n\n/**\n * @typedef MultilineData\n * @property {boolean} isMultiline - Whether this is a multiline attribute.\n * @property {(offset: number) => {isAtMultilineItemEnd: boolean, multilineItemText?: string}} checkOffset - Determine whether a given caret index is at the end of a multiline segment.\n */\n\nexport const FORMAT_NAME = 'isolated/collab-caret';\n\n/**\n * Applies given carets to the given record.\n *\n * @param {Object} record The record to apply carets to.\n * @param {MultilineData} multiline\n * @param {Array} carets The carets to apply.\n * @return {Object} A record with the carets applied.\n */\nexport function applyCarets( record, multiline, carets = [] ) {\n\tcarets.forEach( ( caret ) => {\n\t\tlet { start, end, id, color, label } = caret;\n\t\tconst isCollapsed = start === end;\n\t\tconst { isAtMultilineItemEnd, multilineItemText } = multiline.checkOffset( end );\n\t\tconst isShifted = isCollapsed && ( multiline.isMultiline ? isAtMultilineItemEnd : end >= record.text.length );\n\n\t\tconst text = isAtMultilineItemEnd ? multilineItemText : record.text;\n\n\t\t// Try to accurately get the `length` of the last character (i.e. grapheme) in case\n\t\t// the last character is an emoji, where \"<emoji>\".length can be more than 1.\n\t\t// For example, \"👩‍👩‍👧‍👦\".length === 11. (Intl.Segementer is still unsupported in Firefox)\n\t\t// @ts-ignore Intl.Segmenter is not in spec yet\n\t\tconst lastGrapheme = Intl.Segmenter\n\t\t\t? // @ts-ignore Intl.Segmenter is not in spec yet\n\t\t\t  [ ...new Intl.Segmenter().segment( text ) ].pop()?.segment\n\t\t\t: undefined;\n\t\tconst offset = lastGrapheme?.length ?? 1; // fall back to 1 if we can't accurately segment the last grapheme\n\n\t\tif ( isShifted ) {\n\t\t\tstart = end - offset;\n\t\t}\n\n\t\tif ( isCollapsed ) {\n\t\t\tend = start + offset;\n\t\t}\n\n\t\trecord = applyFormat(\n\t\t\trecord,\n\t\t\t{\n\t\t\t\ttype: FORMAT_NAME,\n\t\t\t\tattributes: {\n\t\t\t\t\tid: 'iso-editor-collab-caret-' + id,\n\t\t\t\t\tclass: classnames( {\n\t\t\t\t\t\t'is-collapsed': isCollapsed,\n\t\t\t\t\t\t'is-shifted': isShifted,\n\t\t\t\t\t} ),\n\t\t\t\t\ttitle: label,\n\t\t\t\t\tstyle: [\n\t\t\t\t\t\t`--iso-editor-collab-caret-color: ${ color || '#2e3d48' };`,\n\t\t\t\t\t\t`--iso-editor-collab-caret-label-text-color: ${\n\t\t\t\t\t\t\tshouldUseWhiteText( color ) ? '#fff' : '#1e1e1e'\n\t\t\t\t\t\t};`,\n\t\t\t\t\t].join( ' ' ),\n\t\t\t\t},\n\t\t\t},\n\t\t\tstart,\n\t\t\tend\n\t\t);\n\t} );\n\n\treturn record;\n}\n\nconst getCarets = memoize( ( peers, richTextIdentifier, blockClientId ) => {\n\treturn Object.entries( peers )\n\t\t.filter( ( [ , peer ] ) => {\n\t\t\treturn (\n\t\t\t\tpeer?.start?.clientId === blockClientId &&\n\t\t\t\tpeer?.end?.clientId === blockClientId &&\n\t\t\t\tpeer.start.attributeKey === richTextIdentifier\n\t\t\t);\n\t\t} )\n\t\t.map( ( [ id, peer ] ) => ( {\n\t\t\tid,\n\t\t\tlabel: peer.name,\n\t\t\tstart: peer.start.offset,\n\t\t\tend: peer.end.offset,\n\t\t\tcolor: peer.color,\n\t\t} ) );\n} );\n\n/**\n * @param {string} multilineTag\n * @param {string} attributeValue\n * @returns {MultilineData}\n * */\nconst getMultilineData = ( multilineTag, attributeValue ) => {\n\tconst multilineItems = multilineTag\n\t\t? create( { html: attributeValue, multilineTag } )?.text?.split?.( __UNSTABLE_LINE_SEPARATOR )\n\t\t: [];\n\n\treturn {\n\t\tisMultiline: !! multilineTag,\n\t\tcheckOffset: ( offset ) => {\n\t\t\tlet count = 0;\n\t\t\tfor ( const itemText of multilineItems ) {\n\t\t\t\tcount += itemText.length;\n\t\t\t\tif ( offset === count ) {\n\t\t\t\t\treturn { isAtMultilineItemEnd: true, multilineItemText: itemText };\n\t\t\t\t}\n\t\t\t\tcount += 1; // line separator character\n\t\t\t}\n\t\t\treturn { isAtMultilineItemEnd: false };\n\t\t},\n\t};\n};\n\nconst getStableBlockAttributeSelector = memoize( ( getBlockAttributes, blockClientId, attributeKey ) => () =>\n\tgetBlockAttributes( blockClientId )[ attributeKey ]\n);\n\nexport const settings = {\n\ttitle: 'Collaboration peer caret',\n\ttagName: 'mark',\n\tclassName: 'iso-editor-collab-caret',\n\tattributes: {\n\t\tid: 'id',\n\t\tclassName: 'class',\n\t},\n\tedit() {\n\t\treturn null;\n\t},\n\t__experimentalGetPropsForEditableTreePreparation( select, { richTextIdentifier, blockClientId } ) {\n\t\t// Adds special handling for certain block attributes that are known to be multiline,\n\t\t// e.g. the `values` attribute of the List block.\n\t\tconst MULTILINE_ATTRIBUTES = {\n\t\t\t'core/list': { values: { multilineTag: 'li' } },\n\t\t};\n\n\t\tconst blockName = select( 'core/block-editor' ).getBlockName( blockClientId );\n\t\tconst multilineTag = MULTILINE_ATTRIBUTES[ blockName ]?.[ richTextIdentifier ]?.multilineTag;\n\n\t\t// The properties in this return object need to be as stable as possible.\n\t\t// See https://github.com/WordPress/gutenberg/issues/23428\n\t\treturn {\n\t\t\tcarets: getCarets( select( 'isolated/editor' ).getCollabPeers(), richTextIdentifier, blockClientId ),\n\t\t\tmultilineTag,\n\t\t\tblockAttributeSelector: getStableBlockAttributeSelector(\n\t\t\t\tselect( 'core/block-editor' ).getBlockAttributes,\n\t\t\t\tblockClientId,\n\t\t\t\trichTextIdentifier\n\t\t\t),\n\t\t};\n\t},\n\t__experimentalCreatePrepareEditableTree( { carets, multilineTag, blockAttributeSelector } ) {\n\t\treturn ( formats, text ) => {\n\t\t\tif ( ! carets?.length ) {\n\t\t\t\treturn formats;\n\t\t\t}\n\n\t\t\tconst multiline = getMultilineData( multilineTag, blockAttributeSelector() );\n\t\t\tconst record = applyCarets( { formats, text }, multiline, carets );\n\n\t\t\treturn record.formats;\n\t\t};\n\t},\n};\n\nexport const registerFormatCollabCaret = () => {\n\tregisterFormatType( FORMAT_NAME, settings );\n};\n"],"file":"index.js"}