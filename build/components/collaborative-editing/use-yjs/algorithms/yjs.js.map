{"version":3,"sources":["../../../../../src/components/collaborative-editing/use-yjs/algorithms/yjs.js"],"names":["updateBlocksDoc","yDocBlocks","blocks","richTextHint","clientId","has","set","yjs","Map","order","get","Array","byClientId","currentOrder","toArray","orderDiff","diff","simpleDiffArray","map","block","slice","index","remove","forEach","_clientId","insert","includes","_block","innerBlocks","isPreexisting","richTexts","getKnownRichTextAttributes","attributeKey","updateRichText","newBlock","knownRichTextAttributes","attributeSet","Set","keys","add","newText","attributes","blockWithRichTexts","XmlText","undefined","richTextMap","oldText","updateCommentsDoc","commentsDoc","comments","comment","currentDoc","_id","isNewDoc","field","updateCommentRepliesDoc","replies","repliesDoc","reply","currentReplyDoc","updatePostDoc","doc","newPost","postDoc","getMap","title","commentsDocToArray","Object","entries","toJSON","id","commentDoc","type","content","createdAt","status","start","end","authorId","authorName","replyId","entryDoc","sort","a","b","blocksDocToArray","richTextsAsStrings","from","reduce","acc","key","value","postDocToObject"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport * as yjs from 'yjs';\nimport * as diff from 'lib0/diff';\nimport { isEqual } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { applyHTMLDelta, richTextMapToHTML } from '../algorithms/rich-text';\n\n/**\n * @typedef {Object} PostObject\n * @property {string} title\n * @property {Object[]} blocks\n * @property {Object[]} comments\n */\n\n/** @typedef {import('../yjs-doc').RichTextHint} RichTextHint */\n\n/**\n * Updates the block doc with the local blocks block changes.\n *\n * @param {yjs.Map} yDocBlocks Blocks doc.\n * @param {Array}   blocks     Updated blocks.\n * @param {RichTextHint} [richTextHint] Indication that a certain block attribute is a RichText, inferred from the current editor selection.\n * @param {string}  clientId   Current clientId.\n */\nexport function updateBlocksDoc( yDocBlocks, blocks, richTextHint, clientId = '' ) {\n\tif ( ! yDocBlocks.has( 'order' ) ) {\n\t\tyDocBlocks.set( 'order', new yjs.Map() );\n\t}\n\tlet order = yDocBlocks.get( 'order' );\n\tif ( ! order.has( clientId ) ) order.set( clientId, new yjs.Array() );\n\torder = order.get( clientId );\n\tif ( ! yDocBlocks.has( 'byClientId' ) ) {\n\t\tyDocBlocks.set( 'byClientId', new yjs.Map() );\n\t}\n\tconst byClientId = yDocBlocks.get( 'byClientId' );\n\tconst currentOrder = order.toArray();\n\tconst orderDiff = diff.simpleDiffArray(\n\t\tcurrentOrder,\n\t\tblocks.map( ( block ) => block.clientId )\n\t);\n\tcurrentOrder\n\t\t.slice( orderDiff.index, orderDiff.remove )\n\t\t.forEach( ( _clientId ) => ! orderDiff.insert.includes( _clientId ) && byClientId.delete( _clientId ) );\n\torder.delete( orderDiff.index, orderDiff.remove );\n\torder.insert( orderDiff.index, orderDiff.insert );\n\n\tif ( ! yDocBlocks.has( 'richTexts' ) ) {\n\t\tyDocBlocks.set( 'richTexts', new yjs.Map() );\n\t}\n\n\tfor ( const _block of blocks ) {\n\t\tconst { innerBlocks, ...block } = _block;\n\t\tconst isPreexisting = byClientId.has( block.clientId );\n\n\t\tif ( ! isPreexisting || ! isEqual( byClientId.get( block.clientId ), block ) ) {\n\t\t\tconst richTexts = yDocBlocks.get( 'richTexts' );\n\n\t\t\tgetKnownRichTextAttributes( block.clientId, richTextHint, richTexts ).forEach( ( attributeKey ) => {\n\t\t\t\tupdateRichText( {\n\t\t\t\t\tnewBlock: block,\n\t\t\t\t\tattributeKey,\n\t\t\t\t\trichTexts,\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tbyClientId.set( block.clientId, block );\n\t\t}\n\n\t\tupdateBlocksDoc( yDocBlocks, innerBlocks, richTextHint, block.clientId );\n\t}\n}\n\n/** @returns {Set<string>} */\nfunction getKnownRichTextAttributes( clientId, richTextHint, richTexts ) {\n\tconst knownRichTextAttributes = richTexts.has( clientId ) && richTexts.get( clientId );\n\tconst attributeSet = knownRichTextAttributes ? new Set( knownRichTextAttributes.keys() ) : new Set();\n\tif ( richTextHint && clientId === richTextHint.clientId ) {\n\t\tattributeSet.add( richTextHint.attributeKey );\n\t}\n\treturn attributeSet;\n}\n\n/**\n * Updates the RichText value in the richTexts yMap using index-based manipulation.\n *\n * @param {Object} args\n * @param {Object} args.newBlock\n * @param {string} args.attributeKey\n * @param {yjs.Map} args.richTexts\n */\nexport function updateRichText( { newBlock, attributeKey, richTexts } ) {\n\tconst newText = newBlock.attributes[ attributeKey ];\n\n\tif ( ! richTexts.has( newBlock.clientId ) ) {\n\t\trichTexts.set( newBlock.clientId, new yjs.Map() );\n\t}\n\tconst blockWithRichTexts = richTexts.get( newBlock.clientId );\n\tif ( ! blockWithRichTexts.has( attributeKey ) ) {\n\t\tblockWithRichTexts.set(\n\t\t\tattributeKey,\n\t\t\tnew yjs.Map( [\n\t\t\t\t[ 'xmlText', new yjs.XmlText() ],\n\t\t\t\t[ 'multilineTag', undefined ],\n\t\t\t\t[ 'replacements', new yjs.Array() ],\n\t\t\t] )\n\t\t);\n\t}\n\n\tconst richTextMap = blockWithRichTexts.get( attributeKey );\n\tconst oldText = richTextMapToHTML( blockWithRichTexts.get( attributeKey ) );\n\tapplyHTMLDelta( oldText, newText, richTextMap );\n}\n\n/**\n * Updates the comments doc with the local comments changes.\n *\n * @param {yjs.Map} commentsDoc  comments doc.\n * @param {Object[]}  comments     Updated comments.\n */\nexport function updateCommentsDoc( commentsDoc, comments = [] ) {\n\tcomments.forEach( ( comment ) => {\n\t\tlet currentDoc = commentsDoc.get( comment._id );\n\t\tconst isNewDoc = ! currentDoc;\n\t\tif ( ! currentDoc ) {\n\t\t\tcommentsDoc.set( comment._id, new yjs.Map() );\n\t\t}\n\t\tcurrentDoc = commentsDoc.get( comment._id );\n\t\t// Update regular fields\n\t\t[ 'type', 'content', 'createdAt', 'status', 'start', 'end', 'authorId', 'authorName' ].forEach( ( field ) => {\n\t\t\tif ( isNewDoc || currentDoc.get( field ) !== comment[ field ] ) {\n\t\t\t\tcurrentDoc.set( field, comment[ field ] );\n\t\t\t}\n\t\t} );\n\n\t\tif ( isNewDoc ) {\n\t\t\tcurrentDoc.set( 'replies', new yjs.Map() );\n\t\t}\n\n\t\tupdateCommentRepliesDoc( currentDoc.get( 'replies' ), comment.replies );\n\t} );\n}\n\n/**\n * Updates the replies doc with the local replies changes.\n *\n * @param {yjs.Map} repliesDoc  replies doc.\n * @param {Object[]}  replies     Updated replies.\n */\nexport function updateCommentRepliesDoc( repliesDoc, replies = [] ) {\n\treplies.forEach( ( reply ) => {\n\t\tlet currentReplyDoc = repliesDoc.get( reply._id );\n\t\tconst isNewDoc = ! currentReplyDoc;\n\t\tif ( ! currentReplyDoc ) {\n\t\t\trepliesDoc.set( reply._id, new yjs.Map() );\n\t\t}\n\t\tcurrentReplyDoc = repliesDoc.get( reply._id );\n\t\t[ 'content', 'createdAt', 'authorId', 'authorName' ].forEach( ( field ) => {\n\t\t\tif ( isNewDoc || currentReplyDoc.get( field ) !== reply[ field ] ) {\n\t\t\t\tcurrentReplyDoc.set( field, reply[ field ] );\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Updates the post doc with the local post changes.\n *\n * @param {yjs.Doc} doc     Shared doc.\n * @param {PostObject}  newPost Updated post.\n * @param {RichTextHint} [richTextHint]\n */\nexport function updatePostDoc( doc, newPost, richTextHint ) {\n\tconst postDoc = doc.getMap( 'post' );\n\tif ( postDoc.get( 'title' ) !== newPost.title ) {\n\t\tpostDoc.set( 'title', newPost.title );\n\t}\n\tif ( ! postDoc.get( 'blocks' ) ) {\n\t\tpostDoc.set( 'blocks', new yjs.Map() );\n\t}\n\tupdateBlocksDoc( postDoc.get( 'blocks' ), newPost.blocks || [], richTextHint );\n\tif ( ! postDoc.get( 'comments' ) ) {\n\t\tpostDoc.set( 'comments', new yjs.Map() );\n\t}\n\tupdateCommentsDoc( postDoc.get( 'comments' ), newPost.comments );\n}\n\n/**\n * Converts the comments doc into a comment list.\n *\n * @param {yjs.Map} commentsDoc Comments doc.\n * @return {Array} Comment list.\n */\nexport function commentsDocToArray( commentsDoc ) {\n\tif ( ! commentsDoc ) {\n\t\treturn [];\n\t}\n\n\treturn Object.entries( commentsDoc.toJSON() ).map( ( [ id, commentDoc ] ) => {\n\t\treturn {\n\t\t\t_id: id,\n\t\t\ttype: commentDoc.type,\n\t\t\tcontent: commentDoc.content,\n\t\t\tcreatedAt: commentDoc.createdAt,\n\t\t\tstatus: commentDoc.status,\n\t\t\tstart: commentDoc.start,\n\t\t\tend: commentDoc.end,\n\t\t\tauthorId: commentDoc.authorId,\n\t\t\tauthorName: commentDoc.authorName,\n\t\t\treplies: Object.entries( commentDoc.replies )\n\t\t\t\t.map( ( [ replyId, entryDoc ] ) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t_id: replyId,\n\t\t\t\t\t\tcontent: entryDoc.content,\n\t\t\t\t\t\tcreatedAt: entryDoc.createdAt,\n\t\t\t\t\t\tauthorId: entryDoc.authorId,\n\t\t\t\t\t\tauthorName: entryDoc.authorName,\n\t\t\t\t\t};\n\t\t\t\t} )\n\t\t\t\t.sort( ( a, b ) => a.createdAt - b.createdAt ),\n\t\t};\n\t} );\n}\n\n/**\n * Converts the block doc into a block list.\n *\n * @param {yjs.Map} yDocBlocks Block doc.\n * @param {string}  clientId   Current block clientId.\n * @return {Array} Block list.\n */\nexport function blocksDocToArray( yDocBlocks, clientId = '' ) {\n\tif ( ! yDocBlocks ) {\n\t\treturn [];\n\t}\n\tlet order = yDocBlocks.get( 'order' );\n\torder = order.get( clientId )?.toArray();\n\tif ( ! order ) return [];\n\tconst byClientId = yDocBlocks.get( 'byClientId' );\n\n\treturn order.map( ( _clientId ) => {\n\t\tconst richTextMap = yDocBlocks.get( 'richTexts' ).get( _clientId ) || new yjs.Map();\n\t\tconst richTextsAsStrings = Array.from( richTextMap.entries() ).reduce( ( acc, [ key, value ] ) => {\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[ key ]: richTextMapToHTML( value ),\n\t\t\t};\n\t\t}, {} );\n\n\t\treturn {\n\t\t\t...byClientId.get( _clientId ),\n\t\t\tattributes: {\n\t\t\t\t...byClientId.get( _clientId ).attributes,\n\t\t\t\t...richTextsAsStrings,\n\t\t\t},\n\t\t\tinnerBlocks: blocksDocToArray( yDocBlocks, _clientId ),\n\t\t};\n\t} );\n}\n\n/**\n * Converts the post doc into a post object.\n *\n * @param {yjs.Doc} doc Shared doc.\n * @return {PostObject} Post object.\n */\nexport function postDocToObject( doc ) {\n\tconst postDoc = doc.getMap( 'post' );\n\tconst blocks = blocksDocToArray( postDoc.get( 'blocks' ) );\n\tconst comments = commentsDocToArray( postDoc.get( 'comments' ) );\n\n\treturn {\n\t\ttitle: postDoc.get( 'title' ) || '',\n\t\tblocks,\n\t\tcomments,\n\t};\n}\n"],"file":"yjs.js"}