{"version":3,"sources":["../../../src/components/block-editor/post-text-editor.js"],"names":["PostTextEditor","props","edit","bind","stopEditing","state","event","value","target","onChange","setState","isDirty","onPersist","instanceId","Component","select","getBlocks","dispatch","updateBlocksWithoutUndo","content","blocks","withInstanceId"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAGA;;AAKA;;AACA;;AACA;;AACA;;AACA;;;;;;;;IAEaA,c;;;;;AACZ,0BAAaC,KAAb,EAAqB;AAAA;;AAAA;AACpB,8BAAOA,KAAP;AAEA,UAAKC,IAAL,GAAY,MAAKA,IAAL,CAAUC,IAAV,gDAAZ;AACA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBD,IAAjB,gDAAnB;AAEA,UAAKE,KAAL,GAAa,EAAb;AANoB;AAOpB;;;;;AAaD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,kBAAMC,KAAN,EAAc;AACb;AACA,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACA,WAAKN,KAAL,CAAWQ,QAAX,CAAqBF,KAArB;AACA,WAAKG,QAAL,CAAe;AAAEH,QAAAA,KAAK,EAALA,KAAF;AAASI,QAAAA,OAAO,EAAE;AAAlB,OAAf;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,uBAAc;AACb,UAAK,KAAKN,KAAL,CAAWM,OAAhB,EAA0B;AACzB,aAAKV,KAAL,CAAWW,SAAX,CAAsB,KAAKP,KAAL,CAAWE,KAAjC;AACA,aAAKG,QAAL,CAAe;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAf;AACA;AACD;;;WAED,kBAAS;AACR,UAAQJ,KAAR,GAAkB,KAAKF,KAAvB,CAAQE,KAAR;AACA,UAAQM,UAAR,GAAuB,KAAKZ,KAA5B,CAAQY,UAAR;AACA,aACC,8BACC;AACC,QAAA,OAAO,yBAAoBA,UAApB,CADR;AAEC,QAAA,SAAS,EAAC;AAFX,SAIG,cAAI,mBAAJ,CAJH,CADD,EAOC,cAAC,iCAAD;AACC,QAAA,YAAY,EAAC,KADd;AAEC,QAAA,GAAG,EAAC,MAFL;AAGC,QAAA,KAAK,EAAGN,KAHT,CAIC;AAJD;AAKC,QAAA,QAAQ,EAAG,KAAKL,IALjB;AAMC,QAAA,MAAM,EAAG,KAAKE,WANf;AAOC,QAAA,SAAS,EAAC,yBAPX;AAQC,QAAA,EAAE,yBAAoBS,UAApB,CARH;AASC,QAAA,WAAW,EAAG,cAAI,iCAAJ;AATf,QAPD,CADD;AAqBA;;;WAjED,kCAAiCZ,KAAjC,EAAwCI,KAAxC,EAAgD;AAC/C,UAAKA,KAAK,CAACM,OAAX,EAAqB;AACpB,eAAO,IAAP;AACA;;AAED,aAAO;AACNJ,QAAAA,KAAK,EAAEN,KAAK,CAACM,KADP;AAENI,QAAAA,OAAO,EAAE;AAFH,OAAP;AAIA;;;EAnBkCG,kB;;;;eA8ErB,sBAAS,CACvB,sBAAY,UAAEC,MAAF,EAAc;AACzB,gBAAsBA,MAAM,CAAE,iBAAF,CAA5B;AAAA,MAAQC,SAAR,WAAQA,SAAR;;AACA,SAAO;AACNT,IAAAA,KAAK,EAAE,uBAAWS,SAAS,EAApB;AADD,GAAP;AAGA,CALD,CADuB,EAOvB,wBAAc,UAAEC,QAAF,EAAgB;AAC7B,kBAAoCA,QAAQ,CAAE,iBAAF,CAA5C;AAAA,MAAQC,uBAAR,aAAQA,uBAAR;;AACA,SAAO;AACNT,IAAAA,QADM,oBACIU,OADJ,EACc;AACnB,UAAMC,MAAM,GAAG,mBAAOD,OAAP,CAAf;AACAD,MAAAA,uBAAuB,CAAEE,MAAF,CAAvB;AACA,KAJK;AAKNR,IAAAA,SALM,qBAKKO,OALL,EAKe;AACpB,UAAMC,MAAM,GAAG,mBAAOD,OAAP,CAAf;AACAD,MAAAA,uBAAuB,CAAEE,MAAF,CAAvB;AACA;AARK,GAAP;AAUA,CAZD,CAPuB,EAoBvBC,uBApBuB,CAAT,EAqBVrB,cArBU,C","sourcesContent":["/**\n * External dependencies\n */\nimport Textarea from 'react-autosize-textarea';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Component } from '@wordpress/element';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { withInstanceId, compose } from '@wordpress/compose';\nimport { parse, serialize } from '@wordpress/blocks';\n\nexport class PostTextEditor extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.edit = this.edit.bind( this );\n\t\tthis.stopEditing = this.stopEditing.bind( this );\n\n\t\tthis.state = {};\n\t}\n\n\tstatic getDerivedStateFromProps( props, state ) {\n\t\tif ( state.isDirty ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\tvalue: props.value,\n\t\t\tisDirty: false,\n\t\t};\n\t}\n\n\t/**\n\t * Handles a textarea change event to notify the onChange prop callback and\n\t * reflect the new value in the component's own state. This marks the start\n\t * of the user's edits, if not already changed, preventing future props\n\t * changes to value from replacing the rendered value. This is expected to\n\t * be followed by a reset to dirty state via `stopEditing`.\n\t *\n\t * @see stopEditing\n\t *\n\t * @param {Event} event Change event.\n\t */\n\tedit( event ) {\n\t\t// @ts-ignore */}\n\t\tconst value = event.target.value;\n\t\tthis.props.onChange( value );\n\t\tthis.setState( { value, isDirty: true } );\n\t}\n\n\t/**\n\t * Function called when the user has completed their edits, responsible for\n\t * ensuring that changes, if made, are surfaced to the onPersist prop\n\t * callback and resetting dirty state.\n\t */\n\tstopEditing() {\n\t\tif ( this.state.isDirty ) {\n\t\t\tthis.props.onPersist( this.state.value );\n\t\t\tthis.setState( { isDirty: false } );\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { value } = this.state;\n\t\tconst { instanceId } = this.props;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<label\n\t\t\t\t\thtmlFor={ `post-content-${ instanceId }` }\n\t\t\t\t\tclassName=\"screen-reader-text\"\n\t\t\t\t>\n\t\t\t\t\t{ __( 'Type text or HTML' ) }\n\t\t\t\t</label>\n\t\t\t\t<Textarea\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\tdir=\"auto\"\n\t\t\t\t\tvalue={ value }\n\t\t\t\t\t// @ts-ignore */}\n\t\t\t\t\tonChange={ this.edit }\n\t\t\t\t\tonBlur={ this.stopEditing }\n\t\t\t\t\tclassName=\"editor-post-text-editor\"\n\t\t\t\t\tid={ `post-content-${ instanceId }` }\n\t\t\t\t\tplaceholder={ __( 'Start writing with text or HTML' ) }\n\t\t\t\t/>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default compose( [\n\twithSelect( ( select ) => {\n\t\tconst { getBlocks } = select( 'isolated/editor' );\n\t\treturn {\n\t\t\tvalue: serialize( getBlocks() ),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\tconst { updateBlocksWithoutUndo } = dispatch( 'isolated/editor' );\n\t\treturn {\n\t\t\tonChange( content ) {\n\t\t\t\tconst blocks = parse( content );\n\t\t\t\tupdateBlocksWithoutUndo( blocks );\n\t\t\t},\n\t\t\tonPersist( content ) {\n\t\t\t\tconst blocks = parse( content );\n\t\t\t\tupdateBlocksWithoutUndo( blocks );\n\t\t\t},\n\t\t};\n\t} ),\n\twithInstanceId,\n] )( PostTextEditor );\n"],"file":"post-text-editor.js"}