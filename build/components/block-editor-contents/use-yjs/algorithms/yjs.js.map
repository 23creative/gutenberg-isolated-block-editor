{"version":3,"sources":["../../../../../src/components/block-editor-contents/use-yjs/algorithms/yjs.js"],"names":["simpleDiff","a","b","left","right","length","index","remove","insert","slice","updateBlocksDoc","yDocBlocks","blocks","clientId","has","set","yjs","Map","order","get","Array","byClientId","currentOrder","toArray","orderDiff","map","block","forEach","_clientId","includes","_block","innerBlocks","updateCommentsDoc","commentsDoc","comments","comment","currentDoc","_id","isNewDoc","field","updateCommentRepliesDoc","replies","repliesDoc","reply","currentReplyDoc","updatePostDoc","doc","newPost","postDoc","title","commentsDocToArray","Object","entries","toJSON","id","commentDoc","type","content","createdAt","status","start","end","authorId","authorName","replyId","entryDoc","sort","blocksDocToArray","postDocToObject"],"mappings":"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","sourcesContent":["// @ts-nocheck TODO\n\nimport * as yjs from 'yjs';\nimport { isEqual } from 'lodash';\n\n/**\n * Returns information for splicing array `a` into array `b`,\n * by swapping the minimum slice of disagreement.\n *\n * @param {Array} a\n * @param {Array} b\n * @return {Object} diff.\n */\nfunction simpleDiff( a, b ) {\n\tlet left = 0;\n\tlet right = 0;\n\twhile ( left < a.length && left < b.length && a[ left ] === b[ left ] ) {\n\t\tleft++;\n\t}\n\tif ( left !== a.length || left !== b.length ) {\n\t\twhile (\n\t\t\tright + left < a.length &&\n\t\t\tright + left < b.length &&\n\t\t\ta[ a.length - right - 1 ] === b[ b.length - right - 1 ]\n\t\t) {\n\t\t\tright++;\n\t\t}\n\t}\n\treturn {\n\t\tindex: left,\n\t\tremove: a.length - left - right,\n\t\tinsert: b.slice( left, b.length - right ),\n\t};\n}\n\n/**\n * Updates the block doc with the local blocks block changes.\n *\n * @param {yjs.Map} yDocBlocks Blocks doc.\n * @param {Array}   blocks     Updated blocks.\n * @param {string}  clientId   Current clientId.\n */\nexport function updateBlocksDoc( yDocBlocks, blocks, clientId = '' ) {\n\tif ( ! yDocBlocks.has( 'order' ) ) {\n\t\tyDocBlocks.set( 'order', new yjs.Map() );\n\t}\n\tlet order = yDocBlocks.get( 'order' );\n\tif ( ! order.has( clientId ) ) order.set( clientId, new yjs.Array() );\n\torder = order.get( clientId );\n\tif ( ! yDocBlocks.has( 'byClientId' ) ) {\n\t\tyDocBlocks.set( 'byClientId', new yjs.Map() );\n\t}\n\tconst byClientId = yDocBlocks.get( 'byClientId' );\n\tconst currentOrder = order.toArray();\n\tconst orderDiff = simpleDiff(\n\t\tcurrentOrder,\n\t\tblocks.map( ( block ) => block.clientId )\n\t);\n\tcurrentOrder\n\t\t.slice( orderDiff.index, orderDiff.remove )\n\t\t.forEach(\n\t\t\t( _clientId ) =>\n\t\t\t\t! orderDiff.insert.includes( _clientId ) &&\n\t\t\t\tbyClientId.delete( _clientId )\n\t\t);\n\torder.delete( orderDiff.index, orderDiff.remove );\n\torder.insert( orderDiff.index, orderDiff.insert );\n\n\tfor ( const _block of blocks ) {\n\t\tconst { innerBlocks, ...block } = _block;\n\t\tif (\n\t\t\t! byClientId.has( block.clientId ) ||\n\t\t\t! isEqual( byClientId.get( block.clientId ), block )\n\t\t) {\n\t\t\tbyClientId.set( block.clientId, block );\n\t\t}\n\n\t\tupdateBlocksDoc( yDocBlocks, innerBlocks, block.clientId );\n\t}\n}\n\n/**\n * Updates the comments doc with the local comments changes.\n *\n * @param {yjs.Doc} commentsDoc  comments doc.\n * @param {Object}  comments     Updated comments.\n */\nexport function updateCommentsDoc( commentsDoc, comments = [] ) {\n\tcomments.forEach( ( comment ) => {\n\t\tlet currentDoc = commentsDoc.get( comment._id );\n\t\tconst isNewDoc = ! currentDoc;\n\t\tif ( ! currentDoc ) {\n\t\t\tcommentsDoc.set( comment._id, new yjs.Map() );\n\t\t}\n\t\tcurrentDoc = commentsDoc.get( comment._id );\n\t\t// Update regular fields\n\t\t[\n\t\t\t'type',\n\t\t\t'content',\n\t\t\t'createdAt',\n\t\t\t'status',\n\t\t\t'start',\n\t\t\t'end',\n\t\t\t'authorId',\n\t\t\t'authorName',\n\t\t].forEach( ( field ) => {\n\t\t\tif ( isNewDoc || currentDoc.get( field ) !== comment[ field ] ) {\n\t\t\t\tcurrentDoc.set( field, comment[ field ] );\n\t\t\t}\n\t\t} );\n\n\t\tif ( isNewDoc ) {\n\t\t\tcurrentDoc.set( 'replies', new yjs.Map() );\n\t\t}\n\n\t\tupdateCommentRepliesDoc( currentDoc.get( 'replies' ), comment.replies );\n\t} );\n}\n\n/**\n * Updates the replies doc with the local replies changes.\n *\n * @param {yjs.Doc} repliesDoc  replies doc.\n * @param {Object}  replies     Updated replies.\n */\nexport function updateCommentRepliesDoc( repliesDoc, replies = [] ) {\n\treplies.forEach( ( reply ) => {\n\t\tlet currentReplyDoc = repliesDoc.get( reply._id );\n\t\tconst isNewDoc = ! currentReplyDoc;\n\t\tif ( ! currentReplyDoc ) {\n\t\t\trepliesDoc.set( reply._id, new yjs.Map() );\n\t\t}\n\t\tcurrentReplyDoc = repliesDoc.get( reply._id );\n\t\t[ 'content', 'createdAt', 'authorId', 'authorName' ].forEach(\n\t\t\t( field ) => {\n\t\t\t\tif (\n\t\t\t\t\tisNewDoc ||\n\t\t\t\t\tcurrentReplyDoc.get( field ) !== reply[ field ]\n\t\t\t\t) {\n\t\t\t\t\tcurrentReplyDoc.set( field, reply[ field ] );\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t} );\n}\n\n/**\n * Updates the post doc with the local post changes.\n *\n * @param {yjs.Doc} doc     Shared doc.\n * @param {Object}  newPost Updated post.\n */\nexport function updatePostDoc( doc, newPost ) {\n\tconst postDoc = doc.get( 'post', yjs.Map );\n\tif ( postDoc.get( 'title' ) !== newPost.title ) {\n\t\tpostDoc.set( 'title', newPost.title );\n\t}\n\tif ( ! postDoc.get( 'blocks', yjs.Map ) ) {\n\t\tpostDoc.set( 'blocks', new yjs.Map() );\n\t}\n\tupdateBlocksDoc( postDoc.get( 'blocks' ), newPost.blocks || [] );\n\tif ( ! postDoc.get( 'comments', yjs.Map ) ) {\n\t\tpostDoc.set( 'comments', new yjs.Map() );\n\t}\n\tupdateCommentsDoc( postDoc.get( 'comments' ), newPost.comments );\n}\n\n/**\n * Converts the comments doc into a comment list.\n *\n * @param {yjs.Map} commentsDoc Comments doc.\n * @return {Array} Comment list.\n */\nexport function commentsDocToArray( commentsDoc ) {\n\tif ( ! commentsDoc ) {\n\t\treturn [];\n\t}\n\n\treturn Object.entries( commentsDoc.toJSON() ).map(\n\t\t( [ id, commentDoc ] ) => {\n\t\t\treturn {\n\t\t\t\t_id: id,\n\t\t\t\ttype: commentDoc.type,\n\t\t\t\tcontent: commentDoc.content,\n\t\t\t\tcreatedAt: commentDoc.createdAt,\n\t\t\t\tstatus: commentDoc.status,\n\t\t\t\tstart: commentDoc.start,\n\t\t\t\tend: commentDoc.end,\n\t\t\t\tauthorId: commentDoc.authorId,\n\t\t\t\tauthorName: commentDoc.authorName,\n\t\t\t\treplies: Object.entries( commentDoc.replies )\n\t\t\t\t\t.map( ( [ replyId, entryDoc ] ) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t_id: replyId,\n\t\t\t\t\t\t\tcontent: entryDoc.content,\n\t\t\t\t\t\t\tcreatedAt: entryDoc.createdAt,\n\t\t\t\t\t\t\tauthorId: entryDoc.authorId,\n\t\t\t\t\t\t\tauthorName: entryDoc.authorName,\n\t\t\t\t\t\t};\n\t\t\t\t\t} )\n\t\t\t\t\t.sort( ( a, b ) => a.createdAt - b.createdAt ),\n\t\t\t};\n\t\t}\n\t);\n}\n\n/**\n * Converts the block doc into a block list.\n *\n * @param {yjs.Map} yDocBlocks Block doc.\n * @param {string}  clientId   Current block clientId.\n * @return {Array} Block list.\n */\nexport function blocksDocToArray( yDocBlocks, clientId = '' ) {\n\tif ( ! yDocBlocks ) {\n\t\treturn [];\n\t}\n\tlet order = yDocBlocks.get( 'order' );\n\torder = order.get( clientId )?.toArray();\n\tif ( ! order ) return [];\n\tconst byClientId = yDocBlocks.get( 'byClientId' );\n\n\treturn order.map( ( _clientId ) => ( {\n\t\t...byClientId.get( _clientId ),\n\t\tinnerBlocks: blocksDocToArray( yDocBlocks, _clientId ),\n\t} ) );\n}\n\n/**\n * Converts the post doc into a post object.\n *\n * @param {yjs.Map} doc Shared doc.\n * @return {Object} Post object.\n */\nexport function postDocToObject( doc ) {\n\tconst postDoc = doc.get( 'post', yjs.Map );\n\tconst blocks = blocksDocToArray( postDoc.get( 'blocks' ) );\n\tconst comments = commentsDocToArray( postDoc.get( 'comments' ) );\n\n\treturn {\n\t\ttitle: postDoc.get( 'title' ) || '',\n\t\tblocks,\n\t\tcomments,\n\t};\n}\n"],"file":"yjs.js"}